{"ast":null,"code":"import React,{Component}from'react';import Node from'./Node/Node';import{dijkstra}from'../algorithms/dijkstra';import{AStar}from'../algorithms/aStar';import{dfs}from'../algorithms/dfs';import{bfs}from'../algorithms/bfs';import'./PathfindingVisualizer.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default class PathfindingVisualizer extends Component{constructor(){var _this;super();_this=this;/******************** Set up the initial grid ********************/this.getInitialGrid=function(){let rowCount=arguments.length>0&&arguments[0]!==undefined?arguments[0]:_this.state.ROW_COUNT;let colCount=arguments.length>1&&arguments[1]!==undefined?arguments[1]:_this.state.COLUMN_COUNT;const initialGrid=[];for(let row=0;row<rowCount;row++){const currentRow=[];for(let col=0;col<colCount;col++){currentRow.push(_this.createNode(row,col));}initialGrid.push(currentRow);}return initialGrid;};this.createNode=(row,col)=>{return{row,col,isStart:row===this.state.START_NODE_ROW&&col===this.state.START_NODE_COL,isFinish:row===this.state.FINISH_NODE_ROW&&col===this.state.FINISH_NODE_COL,distance:Infinity,distanceToFinishNode:Math.abs(this.state.FINISH_NODE_ROW-row)+Math.abs(this.state.FINISH_NODE_COL-col),isVisited:false,isWall:false,previousNode:null,isNode:true};};this.state={grid:[],START_NODE_ROW:3,FINISH_NODE_ROW:16,START_NODE_COL:5,FINISH_NODE_COL:25,mouseIsPressed:false,ROW_COUNT:25,COLUMN_COUNT:35,isRunning:false,isStartNode:false,isFinishNode:false,isWallNode:false,// xxxxxxx\ncurrRow:0,currCol:0};this.handleMouseDown=this.handleMouseDown.bind(this);this.handleMouseLeave=this.handleMouseLeave.bind(this);this.toggleIsRunning=this.toggleIsRunning.bind(this);}componentDidMount(){const grid=this.getInitialGrid();this.setState({grid});}toggleIsRunning(){this.setState({isRunning:!this.state.isRunning});}/******************** Control mouse events ********************/handleMouseDown(row,col){if(!this.state.isRunning){if(this.isGridClear()){if(document.getElementById(`node-${row}-${col}`).className==='node node-start'){this.setState({mouseIsPressed:true,isStartNode:true,currRow:row,currCol:col});}else if(document.getElementById(`node-${row}-${col}`).className==='node node-finish'){this.setState({mouseIsPressed:true,isFinishNode:true,currRow:row,currCol:col});}else{const newGrid=getNewGridWithWallToggled(this.state.grid,row,col);this.setState({grid:newGrid,mouseIsPressed:true,isWallNode:true,currRow:row,currCol:col});}}else{this.clearGrid();}}}isGridClear(){for(const row of this.state.grid){for(const node of row){const nodeClassName=document.getElementById(`node-${node.row}-${node.col}`).className;if(nodeClassName==='node node-visited'||nodeClassName==='node node-shortest-path'){return false;}}}return true;}handleMouseEnter(row,col){if(!this.state.isRunning){if(this.state.mouseIsPressed){const nodeClassName=document.getElementById(`node-${row}-${col}`).className;if(this.state.isStartNode){if(nodeClassName!=='node node-wall'){const prevStartNode=this.state.grid[this.state.currRow][this.state.currCol];prevStartNode.isStart=false;document.getElementById(`node-${this.state.currRow}-${this.state.currCol}`).className='node';this.setState({currRow:row,currCol:col});const currStartNode=this.state.grid[row][col];currStartNode.isStart=true;document.getElementById(`node-${row}-${col}`).className='node node-start';}this.setState({START_NODE_ROW:row,START_NODE_COL:col});}else if(this.state.isFinishNode){if(nodeClassName!=='node node-wall'){const prevFinishNode=this.state.grid[this.state.currRow][this.state.currCol];prevFinishNode.isFinish=false;document.getElementById(`node-${this.state.currRow}-${this.state.currCol}`).className='node';this.setState({currRow:row,currCol:col});const currFinishNode=this.state.grid[row][col];currFinishNode.isFinish=true;document.getElementById(`node-${row}-${col}`).className='node node-finish';}this.setState({FINISH_NODE_ROW:row,FINISH_NODE_COL:col});}else if(this.state.isWallNode){const newGrid=getNewGridWithWallToggled(this.state.grid,row,col);this.setState({grid:newGrid});}}}}handleMouseUp(row,col){if(!this.state.isRunning){this.setState({mouseIsPressed:false});if(this.state.isStartNode){const isStartNode=!this.state.isStartNode;this.setState({isStartNode,START_NODE_ROW:row,START_NODE_COL:col});}else if(this.state.isFinishNode){const isFinishNode=!this.state.isFinishNode;this.setState({isFinishNode,FINISH_NODE_ROW:row,FINISH_NODE_COL:col});}this.getInitialGrid();}}handleMouseLeave(){if(this.state.isStartNode){const isStartNode=!this.state.isStartNode;this.setState({isStartNode,mouseIsPressed:false});}else if(this.state.isFinishNode){const isFinishNode=!this.state.isFinishNode;this.setState({isFinishNode,mouseIsPressed:false});}else if(this.state.isWallNode){const isWallNode=!this.state.isWallNode;this.setState({isWallNode,mouseIsPressed:false});this.getInitialGrid();}}/******************** Clear Board/Walls ********************/clearGrid(){if(!this.state.isRunning){const newGrid=this.state.grid.slice();for(const row of newGrid){for(const node of row){let nodeClassName=document.getElementById(`node-${node.row}-${node.col}`).className;if(nodeClassName!=='node node-start'&&nodeClassName!=='node node-finish'&&nodeClassName!=='node node-wall'){document.getElementById(`node-${node.row}-${node.col}`).className='node';node.isVisited=false;node.distance=Infinity;node.distanceToFinishNode=Math.abs(this.state.FINISH_NODE_ROW-node.row)+Math.abs(this.state.FINISH_NODE_COL-node.col);}if(nodeClassName==='node node-finish'){node.isVisited=false;node.distance=Infinity;node.distanceToFinishNode=0;}if(nodeClassName==='node node-start'){node.isVisited=false;node.distance=Infinity;node.distanceToFinishNode=Math.abs(this.state.FINISH_NODE_ROW-node.row)+Math.abs(this.state.FINISH_NODE_COL-node.col);node.isStart=true;node.isWall=false;node.previousNode=null;node.isNode=true;}}}}}clearWalls(){if(!this.state.isRunning){const newGrid=this.state.grid.slice();for(const row of newGrid){for(const node of row){let nodeClassName=document.getElementById(`node-${node.row}-${node.col}`).className;if(nodeClassName==='node node-wall'){document.getElementById(`node-${node.row}-${node.col}`).className='node';node.isWall=false;}}}}}/******************** Create Animations ********************/visualize(algo){if(!this.state.isRunning){this.clearGrid();this.toggleIsRunning();const{grid}=this.state;const startNode=grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];const finishNode=grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];let visitedNodesInOrder;switch(algo){case'Dijkstra':visitedNodesInOrder=dijkstra(grid,startNode,finishNode);break;case'AStar':visitedNodesInOrder=AStar(grid,startNode,finishNode);break;case'BFS':visitedNodesInOrder=bfs(grid,startNode,finishNode);break;case'DFS':visitedNodesInOrder=dfs(grid,startNode,finishNode);break;default:// should never get here\nbreak;}const nodesInShortestPathOrder=getNodesInShortestPathOrder(finishNode);nodesInShortestPathOrder.push('end');this.animate(visitedNodesInOrder,nodesInShortestPathOrder);}}animate(visitedNodesInOrder,nodesInShortestPathOrder){for(let i=0;i<=visitedNodesInOrder.length;i++){if(i===visitedNodesInOrder.length){setTimeout(()=>{this.animateShortestPath(nodesInShortestPathOrder);},10*i);return;}setTimeout(()=>{const node=visitedNodesInOrder[i];const nodeClassName=document.getElementById(`node-${node.row}-${node.col}`).className;if(nodeClassName!=='node node-start'&&nodeClassName!=='node node-finish'){document.getElementById(`node-${node.row}-${node.col}`).className='node node-visited';}},10*i);}}/******************** Create path from start to finish ********************/animateShortestPath(nodesInShortestPathOrder){for(let i=0;i<nodesInShortestPathOrder.length;i++){if(nodesInShortestPathOrder[i]==='end'){setTimeout(()=>{this.toggleIsRunning();},i*50);}else{setTimeout(()=>{const node=nodesInShortestPathOrder[i];const nodeClassName=document.getElementById(`node-${node.row}-${node.col}`).className;if(nodeClassName!=='node node-start'&&nodeClassName!=='node node-finish'){document.getElementById(`node-${node.row}-${node.col}`).className='node node-shortest-path';}},i*40);}}}render(){const{grid,mouseIsPressed}=this.state;return/*#__PURE__*/_jsxs(\"div\",{className:\"app-container\",children:[/*#__PURE__*/_jsx(\"nav\",{className:\"navbar navbar-dark bg-dark justify-content-center\",children:/*#__PURE__*/_jsx(\"span\",{className:\"navbar-brand mb-0 h1 text-center\",children:/*#__PURE__*/_jsx(\"strong\",{children:\" Path Visualizer\"})})}),/*#__PURE__*/_jsxs(\"div\",{className:\"main-content\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"grid-wrapper\",children:/*#__PURE__*/_jsx(\"table\",{className:\"grid-container\",onMouseLeave:()=>this.handleMouseLeave(),children:/*#__PURE__*/_jsx(\"tbody\",{className:\"grid\",children:grid.map((row,rowIdx)=>{return/*#__PURE__*/_jsx(\"tr\",{children:row.map((node,nodeIdx)=>{const{row,col,isFinish,isStart,isWall}=node;return/*#__PURE__*/_jsx(Node,{col:col,isFinish:isFinish,isStart:isStart,isWall:isWall,mouseIsPressed:mouseIsPressed,onMouseDown:(row,col)=>this.handleMouseDown(row,col),onMouseEnter:(row,col)=>this.handleMouseEnter(row,col),onMouseUp:()=>this.handleMouseUp(row,col),row:row},nodeIdx);})},rowIdx);})})})}),/*#__PURE__*/_jsxs(\"div\",{className:\"controls\",children:[/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn btn-danger mb-2\",onClick:()=>this.clearGrid(),children:\"Clear Grid\"}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn btn-warning mb-2\",onClick:()=>this.clearWalls(),children:\"Clear Walls\"}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn btn-primary mb-2\",onClick:()=>this.visualize('Dijkstra'),children:\"Dijkstra's\"}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn btn-primary mb-2\",onClick:()=>this.visualize('AStar'),children:\"A*\"}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn btn-primary mb-2\",onClick:()=>this.visualize('BFS'),children:\"Breadth First Search\"}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn btn-primary mb-2\",onClick:()=>this.visualize('DFS'),children:\"Depth First Search\"})]})]})]});}}/******************** Create Walls ********************/const getNewGridWithWallToggled=(grid,row,col)=>{// mouseDown starts to act strange if I don't make newGrid and work off of grid instead.\nconst newGrid=grid.slice();const node=newGrid[row][col];if(!node.isStart&&!node.isFinish&&node.isNode){const newNode={...node,isWall:!node.isWall};newGrid[row][col]=newNode;}return newGrid;};// Backtracks from the finishNode to find the shortest path.\n// Only works when called after the pathfinding methods.\nfunction getNodesInShortestPathOrder(finishNode){const nodesInShortestPathOrder=[];let currentNode=finishNode;while(currentNode!==null){nodesInShortestPathOrder.unshift(currentNode);currentNode=currentNode.previousNode;}return nodesInShortestPathOrder;}","map":{"version":3,"names":["React","Component","Node","dijkstra","AStar","dfs","bfs","jsx","_jsx","jsxs","_jsxs","PathfindingVisualizer","constructor","_this","this","getInitialGrid","rowCount","arguments","length","undefined","state","ROW_COUNT","colCount","COLUMN_COUNT","initialGrid","row","currentRow","col","push","createNode","isStart","START_NODE_ROW","START_NODE_COL","isFinish","FINISH_NODE_ROW","FINISH_NODE_COL","distance","Infinity","distanceToFinishNode","Math","abs","isVisited","isWall","previousNode","isNode","grid","mouseIsPressed","isRunning","isStartNode","isFinishNode","isWallNode","currRow","currCol","handleMouseDown","bind","handleMouseLeave","toggleIsRunning","componentDidMount","setState","isGridClear","document","getElementById","className","newGrid","getNewGridWithWallToggled","clearGrid","node","nodeClassName","handleMouseEnter","prevStartNode","currStartNode","prevFinishNode","currFinishNode","handleMouseUp","slice","clearWalls","visualize","algo","startNode","finishNode","visitedNodesInOrder","nodesInShortestPathOrder","getNodesInShortestPathOrder","animate","i","setTimeout","animateShortestPath","render","children","onMouseLeave","map","rowIdx","nodeIdx","onMouseDown","onMouseEnter","onMouseUp","type","onClick","newNode","currentNode","unshift"],"sources":["C:/Users/TARUN/Downloads/pathFinderVisualizer-master/pathFinderVisualizer-master/src/PathfindingVisualizer/PathfindingVisualizer.jsx"],"sourcesContent":["import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\nimport {dijkstra} from '../algorithms/dijkstra';\r\nimport {AStar} from '../algorithms/aStar';\r\nimport {dfs} from '../algorithms/dfs';\r\nimport {bfs} from '../algorithms/bfs';\r\n\r\nimport './PathfindingVisualizer.css';\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      START_NODE_ROW: 3,\r\n      FINISH_NODE_ROW: 16,\r\n      START_NODE_COL: 5,\r\n      FINISH_NODE_COL: 25,\r\n      mouseIsPressed: false,\r\n      ROW_COUNT: 25,\r\n      COLUMN_COUNT: 35,\r\n      isRunning: false,\r\n      isStartNode: false,\r\n      isFinishNode: false,\r\n      isWallNode: false, // xxxxxxx\r\n      currRow: 0,\r\n      currCol: 0,\r\n    };\r\n\r\n    this.handleMouseDown = this.handleMouseDown.bind(this);\r\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\r\n    this.toggleIsRunning = this.toggleIsRunning.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = this.getInitialGrid();\r\n    this.setState({grid});\r\n  }\r\n\r\n  toggleIsRunning() {\r\n    this.setState({isRunning: !this.state.isRunning});\r\n  }\r\n\r\n  /******************** Set up the initial grid ********************/\r\n  getInitialGrid = (\r\n    rowCount = this.state.ROW_COUNT,\r\n    colCount = this.state.COLUMN_COUNT,\r\n  ) => {\r\n    const initialGrid = [];\r\n    for (let row = 0; row < rowCount; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < colCount; col++) {\r\n        currentRow.push(this.createNode(row, col));\r\n      }\r\n      initialGrid.push(currentRow);\r\n    }\r\n    return initialGrid;\r\n  };\r\n\r\n  createNode = (row, col) => {\r\n    return {\r\n      row,\r\n      col,\r\n      isStart:\r\n        row === this.state.START_NODE_ROW && col === this.state.START_NODE_COL,\r\n      isFinish:\r\n        row === this.state.FINISH_NODE_ROW &&\r\n        col === this.state.FINISH_NODE_COL,\r\n      distance: Infinity,\r\n      distanceToFinishNode:\r\n        Math.abs(this.state.FINISH_NODE_ROW - row) +\r\n        Math.abs(this.state.FINISH_NODE_COL - col),\r\n      isVisited: false,\r\n      isWall: false,\r\n      previousNode: null,\r\n      isNode: true,\r\n    };\r\n  };\r\n\r\n  /******************** Control mouse events ********************/\r\n  handleMouseDown(row, col) {\r\n    if (!this.state.isRunning) {\r\n      if (this.isGridClear()) {\r\n        if (\r\n          document.getElementById(`node-${row}-${col}`).className ===\r\n          'node node-start'\r\n        ) {\r\n          this.setState({\r\n            mouseIsPressed: true,\r\n            isStartNode: true,\r\n            currRow: row,\r\n            currCol: col,\r\n          });\r\n        } else if (\r\n          document.getElementById(`node-${row}-${col}`).className ===\r\n          'node node-finish'\r\n        ) {\r\n          this.setState({\r\n            mouseIsPressed: true,\r\n            isFinishNode: true,\r\n            currRow: row,\r\n            currCol: col,\r\n          });\r\n        } else {\r\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({\r\n            grid: newGrid,\r\n            mouseIsPressed: true,\r\n            isWallNode: true,\r\n            currRow: row,\r\n            currCol: col,\r\n          });\r\n        }\r\n      } else {\r\n        this.clearGrid();\r\n      }\r\n    }\r\n  }\r\n\r\n  isGridClear() {\r\n    for (const row of this.state.grid) {\r\n      for (const node of row) {\r\n        const nodeClassName = document.getElementById(\r\n          `node-${node.row}-${node.col}`,\r\n        ).className;\r\n        if (\r\n          nodeClassName === 'node node-visited' ||\r\n          nodeClassName === 'node node-shortest-path'\r\n        ) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.isRunning) {\r\n      if (this.state.mouseIsPressed) {\r\n        const nodeClassName = document.getElementById(`node-${row}-${col}`)\r\n          .className;\r\n        if (this.state.isStartNode) {\r\n          if (nodeClassName !== 'node node-wall') {\r\n            const prevStartNode = this.state.grid[this.state.currRow][\r\n              this.state.currCol\r\n            ];\r\n            prevStartNode.isStart = false;\r\n            document.getElementById(\r\n              `node-${this.state.currRow}-${this.state.currCol}`,\r\n            ).className = 'node';\r\n\r\n            this.setState({currRow: row, currCol: col});\r\n            const currStartNode = this.state.grid[row][col];\r\n            currStartNode.isStart = true;\r\n            document.getElementById(`node-${row}-${col}`).className =\r\n              'node node-start';\r\n          }\r\n          this.setState({START_NODE_ROW: row, START_NODE_COL: col});\r\n        } else if (this.state.isFinishNode) {\r\n          if (nodeClassName !== 'node node-wall') {\r\n            const prevFinishNode = this.state.grid[this.state.currRow][\r\n              this.state.currCol\r\n            ];\r\n            prevFinishNode.isFinish = false;\r\n            document.getElementById(\r\n              `node-${this.state.currRow}-${this.state.currCol}`,\r\n            ).className = 'node';\r\n\r\n            this.setState({currRow: row, currCol: col});\r\n            const currFinishNode = this.state.grid[row][col];\r\n            currFinishNode.isFinish = true;\r\n            document.getElementById(`node-${row}-${col}`).className =\r\n              'node node-finish';\r\n          }\r\n          this.setState({FINISH_NODE_ROW: row, FINISH_NODE_COL: col});\r\n        } else if (this.state.isWallNode) {\r\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({grid: newGrid});\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  handleMouseUp(row, col) {\r\n    if (!this.state.isRunning) {\r\n      this.setState({mouseIsPressed: false});\r\n      if (this.state.isStartNode) {\r\n        const isStartNode = !this.state.isStartNode;\r\n        this.setState({isStartNode, START_NODE_ROW: row, START_NODE_COL: col});\r\n      } else if (this.state.isFinishNode) {\r\n        const isFinishNode = !this.state.isFinishNode;\r\n        this.setState({\r\n          isFinishNode,\r\n          FINISH_NODE_ROW: row,\r\n          FINISH_NODE_COL: col,\r\n        });\r\n      }\r\n      this.getInitialGrid();\r\n    }\r\n  }\r\n\r\n  handleMouseLeave() {\r\n    if (this.state.isStartNode) {\r\n      const isStartNode = !this.state.isStartNode;\r\n      this.setState({isStartNode, mouseIsPressed: false});\r\n    } else if (this.state.isFinishNode) {\r\n      const isFinishNode = !this.state.isFinishNode;\r\n      this.setState({isFinishNode, mouseIsPressed: false});\r\n    } else if (this.state.isWallNode) {\r\n      const isWallNode = !this.state.isWallNode;\r\n      this.setState({isWallNode, mouseIsPressed: false});\r\n      this.getInitialGrid();\r\n    }\r\n  }\r\n\r\n  /******************** Clear Board/Walls ********************/\r\n\r\n  clearGrid() {\r\n    if (!this.state.isRunning) {\r\n      const newGrid = this.state.grid.slice();\r\n      for (const row of newGrid) {\r\n        for (const node of row) {\r\n          let nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`,\r\n          ).className;\r\n          if (\r\n            nodeClassName !== 'node node-start' &&\r\n            nodeClassName !== 'node node-finish' &&\r\n            nodeClassName !== 'node node-wall'\r\n          ) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node';\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode =\r\n              Math.abs(this.state.FINISH_NODE_ROW - node.row) +\r\n              Math.abs(this.state.FINISH_NODE_COL - node.col);\r\n          }\r\n          if (nodeClassName === 'node node-finish') {\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode = 0;\r\n          }\r\n          if (nodeClassName === 'node node-start') {\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode =\r\n              Math.abs(this.state.FINISH_NODE_ROW - node.row) +\r\n              Math.abs(this.state.FINISH_NODE_COL - node.col);\r\n            node.isStart = true;\r\n            node.isWall = false;\r\n            node.previousNode = null;\r\n            node.isNode = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  clearWalls() {\r\n    if (!this.state.isRunning) {\r\n      const newGrid = this.state.grid.slice();\r\n      for (const row of newGrid) {\r\n        for (const node of row) {\r\n          let nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`,\r\n          ).className;\r\n          if (nodeClassName === 'node node-wall') {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node';\r\n            node.isWall = false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /******************** Create Animations ********************/\r\n  visualize(algo) {\r\n    if (!this.state.isRunning) {\r\n      this.clearGrid();\r\n      this.toggleIsRunning();\r\n      const {grid} = this.state;\r\n      const startNode =\r\n        grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\r\n      const finishNode =\r\n        grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\r\n      let visitedNodesInOrder;\r\n      switch (algo) {\r\n        case 'Dijkstra':\r\n          visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n          break;\r\n        case 'AStar':\r\n          visitedNodesInOrder = AStar(grid, startNode, finishNode);\r\n          break;\r\n        case 'BFS':\r\n          visitedNodesInOrder = bfs(grid, startNode, finishNode);\r\n          break;\r\n        case 'DFS':\r\n          visitedNodesInOrder = dfs(grid, startNode, finishNode);\r\n          break;\r\n        default:\r\n          // should never get here\r\n          break;\r\n      }\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n      nodesInShortestPathOrder.push('end');\r\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }\r\n  }\r\n\r\n  animate(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        const nodeClassName = document.getElementById(\r\n          `node-${node.row}-${node.col}`,\r\n        ).className;\r\n        if (\r\n          nodeClassName !== 'node node-start' &&\r\n          nodeClassName !== 'node node-finish'\r\n        ) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-visited';\r\n        }\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  /******************** Create path from start to finish ********************/\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      if (nodesInShortestPathOrder[i] === 'end') {\r\n        setTimeout(() => {\r\n          this.toggleIsRunning();\r\n        }, i * 50);\r\n      } else {\r\n        setTimeout(() => {\r\n          const node = nodesInShortestPathOrder[i];\r\n          const nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`,\r\n          ).className;\r\n          if (\r\n            nodeClassName !== 'node node-start' &&\r\n            nodeClassName !== 'node node-finish'\r\n          ) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node node-shortest-path';\r\n          }\r\n        }, i * 40);\r\n      }\r\n    }\r\n  }\r\n\r\n render() {\r\n  const {grid, mouseIsPressed} = this.state;\r\n  return (\r\n    <div className=\"app-container\">\r\n      <nav className=\"navbar navbar-dark bg-dark justify-content-center\">\r\n        <span className=\"navbar-brand mb-0 h1 text-center\">\r\n          <strong> Path Visualizer</strong>\r\n        </span>\r\n      </nav>\r\n\r\n      <div className=\"main-content\">\r\n        <div className=\"grid-wrapper\">\r\n          <table\r\n            className=\"grid-container\"\r\n            onMouseLeave={() => this.handleMouseLeave()}>\r\n            <tbody className=\"grid\">\r\n              {grid.map((row, rowIdx) => {\r\n                return (\r\n                  <tr key={rowIdx}>\r\n                    {row.map((node, nodeIdx) => {\r\n                      const {row, col, isFinish, isStart, isWall} = node;\r\n                      return (\r\n                        <Node\r\n                          key={nodeIdx}\r\n                          col={col}\r\n                          isFinish={isFinish}\r\n                          isStart={isStart}\r\n                          isWall={isWall}\r\n                          mouseIsPressed={mouseIsPressed}\r\n                          onMouseDown={(row, col) =>\r\n                            this.handleMouseDown(row, col)\r\n                          }\r\n                          onMouseEnter={(row, col) =>\r\n                            this.handleMouseEnter(row, col)\r\n                          }\r\n                          onMouseUp={() => this.handleMouseUp(row, col)}\r\n                          row={row}\r\n                        ></Node>\r\n                      );\r\n                    })}\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n        <div className=\"controls\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-danger mb-2\"\r\n            onClick={() => this.clearGrid()}>\r\n            Clear Grid\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-warning mb-2\"\r\n            onClick={() => this.clearWalls()}>\r\n            Clear Walls\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary mb-2\"\r\n            onClick={() => this.visualize('Dijkstra')}>\r\n            Dijkstra's\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary mb-2\"\r\n            onClick={() => this.visualize('AStar')}>\r\n            A*\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary mb-2\"\r\n            onClick={() => this.visualize('BFS')}>\r\n            Breadth First Search\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary mb-2\"\r\n            onClick={() => this.visualize('DFS')}>\r\n            Depth First Search\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\n/******************** Create Walls ********************/\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  // mouseDown starts to act strange if I don't make newGrid and work off of grid instead.\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  if (!node.isStart && !node.isFinish && node.isNode) {\r\n    const newNode = {\r\n      ...node,\r\n      isWall: !node.isWall,\r\n    };\r\n    newGrid[row][col] = newNode;\r\n  }\r\n  return newGrid;\r\n};\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called after the pathfinding methods.\r\nfunction getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}