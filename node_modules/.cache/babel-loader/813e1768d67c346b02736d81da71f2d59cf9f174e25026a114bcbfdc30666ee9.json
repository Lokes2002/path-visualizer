{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TARUN\\\\Downloads\\\\pathFinderVisualizer-master\\\\pathFinderVisualizer-master\\\\src\\\\PathfindingVisualizer\\\\PathfindingVisualizer.jsx\";\nimport React, { Component } from 'react';\nimport Node from './Node/Node';\nimport { dijkstra } from '../algorithms/dijkstra';\nimport { AStar } from '../algorithms/aStar';\nimport { dfs } from '../algorithms/dfs';\nimport { bfs } from '../algorithms/bfs';\nimport './PathfindingVisualizer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      startNode: null,\n      finishNode: null,\n      mouseIsPressed: false,\n      ROW_COUNT: 25,\n      COLUMN_COUNT: 35,\n      MOBILE_ROW_COUNT: 10,\n      MOBILE_COLUMN_COUNT: 20,\n      isRunning: false,\n      isStartNode: false,\n      isFinishNode: false,\n      isWallNode: false,\n      currRow: 0,\n      currCol: 0,\n      isDesktopView: true\n    };\n    this.handleMouseDown = this.handleMouseDown.bind(this);\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\n    this.toggleIsRunning = this.toggleIsRunning.bind(this);\n  }\n  componentDidMount() {\n    const grid = this.getInitialGrid();\n    this.setState({\n      grid\n    });\n  }\n  toggleIsRunning() {\n    this.setState({\n      isRunning: !this.state.isRunning\n    });\n  }\n  toggleView() {\n    if (!this.state.isRunning) {\n      this.clearGrid();\n      this.clearWalls();\n      const isDesktopView = !this.state.isDesktopView;\n      let grid;\n      if (isDesktopView) {\n        grid = this.getInitialGrid(this.state.ROW_COUNT, this.state.COLUMN_COUNT);\n        this.setState({\n          isDesktopView,\n          grid\n        });\n      } else {\n        if (this.state.START_NODE_ROW > this.state.MOBILE_ROW_COUNT || this.state.FINISH_NODE_ROW > this.state.MOBILE_ROW_COUNT || this.state.START_NODE_COL > this.state.MOBILE_COLUMN_COUNT || this.state.FINISH_NODE_COL > this.state.MOBILE_COLUMN_COUNT) {\n          alert('Start & Finish Nodes Must Be within 10 Rows x 20 Columns');\n        } else {\n          grid = this.getInitialGrid(this.state.MOBILE_ROW_COUNT, this.state.MOBILE_COLUMN_COUNT);\n          this.setState({\n            isDesktopView,\n            grid\n          });\n        }\n      }\n    }\n  }\n  handleMouseDown(row, col) {\n    if (!this.state.isRunning) {\n      if (this.isGridClear()) {\n        const node = this.state.grid[row][col];\n        const newGrid = this.state.grid.slice();\n        if (node.isStart) {\n          this.setState({\n            mouseIsPressed: true,\n            isStartNode: true,\n            currRow: row,\n            currCol: col\n          });\n        } else if (node.isFinish) {\n          this.setState({\n            mouseIsPressed: true,\n            isFinishNode: true,\n            currRow: row,\n            currCol: col\n          });\n        } else {\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n          this.setState({\n            grid: newGrid,\n            mouseIsPressed: true,\n            isWallNode: true,\n            currRow: row,\n            currCol: col\n          });\n        }\n      } else {\n        this.clearGrid();\n      }\n    }\n  }\n  isGridClear() {\n    for (const row of this.state.grid) {\n      for (const node of row) {\n        const nodeClassName = document.getElementById(`node-${node.row}-${node.col}`).className;\n        if (nodeClassName === 'node node-visited' || nodeClassName === 'node node-shortest-path') {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  handleMouseEnter(row, col) {\n    if (!this.state.isRunning && this.state.mouseIsPressed) {\n      const nodeClassName = document.getElementById(`node-${row}-${col}`).className;\n      if (this.state.isStartNode) {\n        if (nodeClassName !== 'node node-wall') {\n          const prevStartNode = this.state.grid[this.state.currRow][this.state.currCol];\n          prevStartNode.isStart = false;\n          document.getElementById(`node-${this.state.currRow}-${this.state.currCol}`).className = 'node';\n          this.setState({\n            currRow: row,\n            currCol: col\n          });\n          const currStartNode = this.state.grid[row][col];\n          currStartNode.isStart = true;\n          document.getElementById(`node-${row}-${col}`).className = 'node node-start';\n          this.setState({\n            startNode: currStartNode\n          });\n        }\n      } else if (this.state.isFinishNode) {\n        if (nodeClassName !== 'node node-wall') {\n          const prevFinishNode = this.state.grid[this.state.currRow][this.state.currCol];\n          prevFinishNode.isFinish = false;\n          document.getElementById(`node-${this.state.currRow}-${this.state.currCol}`).className = 'node';\n          this.setState({\n            currRow: row,\n            currCol: col\n          });\n          const currFinishNode = this.state.grid[row][col];\n          currFinishNode.isFinish = true;\n          document.getElementById(`node-${row}-${col}`).className = 'node node-finish';\n          this.setState({\n            finishNode: currFinishNode\n          });\n        }\n      } else if (this.state.isWallNode) {\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n        this.setState({\n          grid: newGrid\n        });\n      }\n    }\n  }\n  handleMouseUp() {\n    if (!this.state.isRunning) {\n      this.setState({\n        mouseIsPressed: false,\n        isStartNode: false,\n        isFinishNode: false,\n        isWallNode: false\n      });\n    }\n  }\n  handleMouseLeave() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  // Add other methods like getInitialGrid, getNewGridWithWallToggled etc.\n\n  /******************** Clear Board/Walls ********************/\n\n  clearGrid() {\n    if (!this.state.isRunning) {\n      const newGrid = this.state.grid.slice();\n      for (const row of newGrid) {\n        for (const node of row) {\n          let nodeClassName = document.getElementById(`node-${node.row}-${node.col}`).className;\n          if (nodeClassName !== 'node node-start' && nodeClassName !== 'node node-finish' && nodeClassName !== 'node node-wall') {\n            document.getElementById(`node-${node.row}-${node.col}`).className = 'node';\n            node.isVisited = false;\n            node.distance = Infinity;\n            node.distanceToFinishNode = Math.abs(this.state.FINISH_NODE_ROW - node.row) + Math.abs(this.state.FINISH_NODE_COL - node.col);\n          }\n          if (nodeClassName === 'node node-finish') {\n            node.isVisited = false;\n            node.distance = Infinity;\n            node.distanceToFinishNode = 0;\n          }\n          if (nodeClassName === 'node node-start') {\n            node.isVisited = false;\n            node.distance = Infinity;\n            node.distanceToFinishNode = Math.abs(this.state.FINISH_NODE_ROW - node.row) + Math.abs(this.state.FINISH_NODE_COL - node.col);\n            node.isStart = true;\n            node.isWall = false;\n            node.previousNode = null;\n            node.isNode = true;\n          }\n        }\n      }\n    }\n  }\n  clearWalls() {\n    if (!this.state.isRunning) {\n      const newGrid = this.state.grid.slice();\n      for (const row of newGrid) {\n        for (const node of row) {\n          let nodeClassName = document.getElementById(`node-${node.row}-${node.col}`).className;\n          if (nodeClassName === 'node node-wall') {\n            document.getElementById(`node-${node.row}-${node.col}`).className = 'node';\n            node.isWall = false;\n          }\n        }\n      }\n    }\n  }\n\n  /******************** Create Animations ********************/\n  visualize(algo) {\n    if (!this.state.isRunning) {\n      this.clearGrid();\n      this.toggleIsRunning();\n      const {\n        grid\n      } = this.state;\n      const startNode = grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\n      const finishNode = grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\n      let visitedNodesInOrder;\n      switch (algo) {\n        case 'Dijkstra':\n          visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n          break;\n        case 'AStar':\n          visitedNodesInOrder = AStar(grid, startNode, finishNode);\n          break;\n        case 'BFS':\n          visitedNodesInOrder = bfs(grid, startNode, finishNode);\n          break;\n        case 'DFS':\n          visitedNodesInOrder = dfs(grid, startNode, finishNode);\n          break;\n        default:\n          // should never get here\n          break;\n      }\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n      nodesInShortestPathOrder.push('end');\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n  }\n  animate(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 40 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        const nodeClassName = document.getElementById(`node-${node.row}-${node.col}`).className;\n        if (nodeClassName !== 'node node-start' && nodeClassName !== 'node node-finish') {\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n        }\n      }, 40 * i);\n    }\n  }\n\n  /******************** Create path from start to finish ********************/\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      if (nodesInShortestPathOrder[i] === 'end') {\n        setTimeout(() => {\n          this.toggleIsRunning();\n        }, i * 50);\n      } else {\n        setTimeout(() => {\n          const node = nodesInShortestPathOrder[i];\n          const nodeClassName = document.getElementById(`node-${node.row}-${node.col}`).className;\n          if (nodeClassName !== 'node node-start' && nodeClassName !== 'node node-finish') {\n            document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n          }\n        }, i * 40);\n      }\n    }\n  }\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n        className: \"navbar navbar-dark bg-dark justify-content-center\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"navbar-brand mb-0 h1 text-center\",\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Shortest Path Visualizer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-wrapper\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"grid-container\",\n            onMouseLeave: () => this.handleMouseLeave(),\n            children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n              className: \"grid\",\n              children: grid.map((row, rowIdx) => {\n                return /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: row.map((node, nodeIdx) => {\n                    const {\n                      row,\n                      col,\n                      isFinish,\n                      isStart,\n                      isWall\n                    } = node;\n                    return /*#__PURE__*/_jsxDEV(Node, {\n                      col: col,\n                      isFinish: isFinish,\n                      isStart: isStart,\n                      isWall: isWall,\n                      mouseIsPressed: mouseIsPressed,\n                      onMouseDown: (row, col) => this.handleMouseDown(row, col),\n                      onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n                      onMouseUp: () => this.handleMouseUp(row, col),\n                      row: row\n                    }, nodeIdx, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 348,\n                      columnNumber: 25\n                    }, this);\n                  })\n                }, rowIdx, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 344,\n                  columnNumber: 19\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 341,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-danger mb-2\",\n            onClick: () => this.clearGrid(),\n            children: \"Clear Grid\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-warning mb-2\",\n            onClick: () => this.clearWalls(),\n            children: \"Clear Walls\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 380,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-primary mb-2\",\n            onClick: () => this.visualize('Dijkstra'),\n            children: \"Dijkstra's\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-primary mb-2\",\n            onClick: () => this.visualize('AStar'),\n            children: \"A*\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-primary mb-2\",\n            onClick: () => this.visualize('BFS'),\n            children: \"Breadth First Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-primary mb-2\",\n            onClick: () => this.visualize('DFS'),\n            children: \"Depth First Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-dark mt-2\",\n            onClick: () => this.toggleView(),\n            children: this.state.isDesktopView ? 'Mobile View' : 'Desktop View'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 5\n    }, this);\n  }\n}\n/******************** Create Walls ********************/\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  // mouseDown starts to act strange if I don't make newGrid and work off of grid instead.\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  if (!node.isStart && !node.isFinish && node.isNode) {\n    const newNode = {\n      ...node,\n      isWall: !node.isWall\n    };\n    newGrid[row][col] = newNode;\n  }\n  return newGrid;\n};\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called after the pathfinding methods.\nfunction getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"names":["React","Component","Node","dijkstra","AStar","dfs","bfs","jsxDEV","_jsxDEV","PathfindingVisualizer","constructor","state","grid","startNode","finishNode","mouseIsPressed","ROW_COUNT","COLUMN_COUNT","MOBILE_ROW_COUNT","MOBILE_COLUMN_COUNT","isRunning","isStartNode","isFinishNode","isWallNode","currRow","currCol","isDesktopView","handleMouseDown","bind","handleMouseLeave","toggleIsRunning","componentDidMount","getInitialGrid","setState","toggleView","clearGrid","clearWalls","START_NODE_ROW","FINISH_NODE_ROW","START_NODE_COL","FINISH_NODE_COL","alert","row","col","isGridClear","node","newGrid","slice","isStart","isFinish","getNewGridWithWallToggled","nodeClassName","document","getElementById","className","handleMouseEnter","prevStartNode","currStartNode","prevFinishNode","currFinishNode","handleMouseUp","isVisited","distance","Infinity","distanceToFinishNode","Math","abs","isWall","previousNode","isNode","visualize","algo","visitedNodesInOrder","nodesInShortestPathOrder","getNodesInShortestPathOrder","push","animate","i","length","setTimeout","animateShortestPath","render","children","fileName","_jsxFileName","lineNumber","columnNumber","onMouseLeave","map","rowIdx","nodeIdx","onMouseDown","onMouseEnter","onMouseUp","type","onClick","newNode","currentNode","unshift"],"sources":["C:/Users/TARUN/Downloads/pathFinderVisualizer-master/pathFinderVisualizer-master/src/PathfindingVisualizer/PathfindingVisualizer.jsx"],"sourcesContent":["import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\nimport {dijkstra} from '../algorithms/dijkstra';\r\nimport {AStar} from '../algorithms/aStar';\r\nimport {dfs} from '../algorithms/dfs';\r\nimport {bfs} from '../algorithms/bfs';\r\n\r\nimport './PathfindingVisualizer.css';\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      startNode: null,\r\n      finishNode: null,\r\n      mouseIsPressed: false,\r\n      ROW_COUNT: 25,\r\n      COLUMN_COUNT: 35,\r\n      MOBILE_ROW_COUNT: 10,\r\n      MOBILE_COLUMN_COUNT: 20,\r\n      isRunning: false,\r\n      isStartNode: false,\r\n      isFinishNode: false,\r\n      isWallNode: false,\r\n      currRow: 0,\r\n      currCol: 0,\r\n      isDesktopView: true,\r\n    };\r\n\r\n    this.handleMouseDown = this.handleMouseDown.bind(this);\r\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\r\n    this.toggleIsRunning = this.toggleIsRunning.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = this.getInitialGrid();\r\n    this.setState({grid});\r\n  }\r\n\r\n  toggleIsRunning() {\r\n    this.setState({isRunning: !this.state.isRunning});\r\n  }\r\n\r\n  toggleView() {\r\n    if (!this.state.isRunning) {\r\n      this.clearGrid();\r\n      this.clearWalls();\r\n      const isDesktopView = !this.state.isDesktopView;\r\n      let grid;\r\n      if (isDesktopView) {\r\n        grid = this.getInitialGrid(\r\n          this.state.ROW_COUNT,\r\n          this.state.COLUMN_COUNT,\r\n        );\r\n        this.setState({isDesktopView, grid});\r\n      } else {\r\n        if (\r\n          this.state.START_NODE_ROW > this.state.MOBILE_ROW_COUNT ||\r\n          this.state.FINISH_NODE_ROW > this.state.MOBILE_ROW_COUNT ||\r\n          this.state.START_NODE_COL > this.state.MOBILE_COLUMN_COUNT ||\r\n          this.state.FINISH_NODE_COL > this.state.MOBILE_COLUMN_COUNT\r\n        ) {\r\n          alert('Start & Finish Nodes Must Be within 10 Rows x 20 Columns');\r\n        } else {\r\n          grid = this.getInitialGrid(\r\n            this.state.MOBILE_ROW_COUNT,\r\n            this.state.MOBILE_COLUMN_COUNT,\r\n          );\r\n          this.setState({isDesktopView, grid});\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    if (!this.state.isRunning) {\r\n      if (this.isGridClear()) {\r\n        const node = this.state.grid[row][col];\r\n        const newGrid = this.state.grid.slice();\r\n\r\n        if (node.isStart) {\r\n          this.setState({\r\n            mouseIsPressed: true,\r\n            isStartNode: true,\r\n            currRow: row,\r\n            currCol: col,\r\n          });\r\n        } else if (node.isFinish) {\r\n          this.setState({\r\n            mouseIsPressed: true,\r\n            isFinishNode: true,\r\n            currRow: row,\r\n            currCol: col,\r\n          });\r\n        } else {\r\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({\r\n            grid: newGrid,\r\n            mouseIsPressed: true,\r\n            isWallNode: true,\r\n            currRow: row,\r\n            currCol: col,\r\n          });\r\n        }\r\n      } else {\r\n        this.clearGrid();\r\n      }\r\n    }\r\n  }\r\n\r\n  isGridClear() {\r\n    for (const row of this.state.grid) {\r\n      for (const node of row) {\r\n        const nodeClassName = document.getElementById(\r\n          `node-${node.row}-${node.col}`,\r\n        ).className;\r\n        if (\r\n          nodeClassName === 'node node-visited' ||\r\n          nodeClassName === 'node node-shortest-path'\r\n        ) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.isRunning && this.state.mouseIsPressed) {\r\n      const nodeClassName = document.getElementById(`node-${row}-${col}`).className;\r\n\r\n      if (this.state.isStartNode) {\r\n        if (nodeClassName !== 'node node-wall') {\r\n          const prevStartNode = this.state.grid[this.state.currRow][this.state.currCol];\r\n          prevStartNode.isStart = false;\r\n          document.getElementById(`node-${this.state.currRow}-${this.state.currCol}`).className = 'node';\r\n\r\n          this.setState({currRow: row, currCol: col});\r\n          const currStartNode = this.state.grid[row][col];\r\n          currStartNode.isStart = true;\r\n          document.getElementById(`node-${row}-${col}`).className = 'node node-start';\r\n          this.setState({startNode: currStartNode});\r\n        }\r\n      } else if (this.state.isFinishNode) {\r\n        if (nodeClassName !== 'node node-wall') {\r\n          const prevFinishNode = this.state.grid[this.state.currRow][this.state.currCol];\r\n          prevFinishNode.isFinish = false;\r\n          document.getElementById(`node-${this.state.currRow}-${this.state.currCol}`).className = 'node';\r\n\r\n          this.setState({currRow: row, currCol: col});\r\n          const currFinishNode = this.state.grid[row][col];\r\n          currFinishNode.isFinish = true;\r\n          document.getElementById(`node-${row}-${col}`).className = 'node node-finish';\r\n          this.setState({finishNode: currFinishNode});\r\n        }\r\n      } else if (this.state.isWallNode) {\r\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n        this.setState({grid: newGrid});\r\n      }\r\n    }\r\n  }\r\n\r\n  handleMouseUp() {\r\n    if (!this.state.isRunning) {\r\n      this.setState({\r\n        mouseIsPressed: false,\r\n        isStartNode: false,\r\n        isFinishNode: false,\r\n        isWallNode: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  handleMouseLeave() {\r\n    this.setState({mouseIsPressed: false});\r\n  }\r\n\r\n  // Add other methods like getInitialGrid, getNewGridWithWallToggled etc.\r\n\r\n  /******************** Clear Board/Walls ********************/\r\n\r\n  clearGrid() {\r\n    if (!this.state.isRunning) {\r\n      const newGrid = this.state.grid.slice();\r\n      for (const row of newGrid) {\r\n        for (const node of row) {\r\n          let nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`,\r\n          ).className;\r\n          if (\r\n            nodeClassName !== 'node node-start' &&\r\n            nodeClassName !== 'node node-finish' &&\r\n            nodeClassName !== 'node node-wall'\r\n          ) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node';\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode =\r\n              Math.abs(this.state.FINISH_NODE_ROW - node.row) +\r\n              Math.abs(this.state.FINISH_NODE_COL - node.col);\r\n          }\r\n          if (nodeClassName === 'node node-finish') {\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode = 0;\r\n          }\r\n          if (nodeClassName === 'node node-start') {\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode =\r\n              Math.abs(this.state.FINISH_NODE_ROW - node.row) +\r\n              Math.abs(this.state.FINISH_NODE_COL - node.col);\r\n            node.isStart = true;\r\n            node.isWall = false;\r\n            node.previousNode = null;\r\n            node.isNode = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  clearWalls() {\r\n    if (!this.state.isRunning) {\r\n      const newGrid = this.state.grid.slice();\r\n      for (const row of newGrid) {\r\n        for (const node of row) {\r\n          let nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`,\r\n          ).className;\r\n          if (nodeClassName === 'node node-wall') {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node';\r\n            node.isWall = false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /******************** Create Animations ********************/\r\n  visualize(algo) {\r\n    if (!this.state.isRunning) {\r\n      this.clearGrid();\r\n      this.toggleIsRunning();\r\n      const {grid} = this.state;\r\n      const startNode =\r\n        grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\r\n      const finishNode =\r\n        grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\r\n      let visitedNodesInOrder;\r\n      switch (algo) {\r\n        case 'Dijkstra':\r\n          visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n          break;\r\n        case 'AStar':\r\n          visitedNodesInOrder = AStar(grid, startNode, finishNode);\r\n          break;\r\n        case 'BFS':\r\n          visitedNodesInOrder = bfs(grid, startNode, finishNode);\r\n          break;\r\n        case 'DFS':\r\n          visitedNodesInOrder = dfs(grid, startNode, finishNode);\r\n          break;\r\n        default:\r\n          // should never get here\r\n          break;\r\n      }\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n      nodesInShortestPathOrder.push('end');\r\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }\r\n  }\r\n\r\n  animate(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 40 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        const nodeClassName = document.getElementById(\r\n          `node-${node.row}-${node.col}`,\r\n        ).className;\r\n        if (\r\n          nodeClassName !== 'node node-start' &&\r\n          nodeClassName !== 'node node-finish'\r\n        ) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-visited';\r\n        }\r\n      }, 40 * i);\r\n    }\r\n  }\r\n\r\n  /******************** Create path from start to finish ********************/\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      if (nodesInShortestPathOrder[i] === 'end') {\r\n        setTimeout(() => {\r\n          this.toggleIsRunning();\r\n        }, i * 50);\r\n      } else {\r\n        setTimeout(() => {\r\n          const node = nodesInShortestPathOrder[i];\r\n          const nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`,\r\n          ).className;\r\n          if (\r\n            nodeClassName !== 'node node-start' &&\r\n            nodeClassName !== 'node node-finish'\r\n          ) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node node-shortest-path';\r\n          }\r\n        }, i * 40);\r\n      }\r\n    }\r\n  }\r\n\r\n render() {\r\n  const {grid, mouseIsPressed} = this.state;\r\n  return (\r\n    <div className=\"app-container\">\r\n      <nav className=\"navbar navbar-dark bg-dark justify-content-center\">\r\n        <span className=\"navbar-brand mb-0 h1 text-center\">\r\n          <strong>Shortest Path Visualizer</strong>\r\n        </span>\r\n      </nav>\r\n\r\n      <div className=\"main-content\">\r\n        <div className=\"grid-wrapper\">\r\n          <table\r\n            className=\"grid-container\"\r\n            onMouseLeave={() => this.handleMouseLeave()}>\r\n            <tbody className=\"grid\">\r\n              {grid.map((row, rowIdx) => {\r\n                return (\r\n                  <tr key={rowIdx}>\r\n                    {row.map((node, nodeIdx) => {\r\n                      const {row, col, isFinish, isStart, isWall} = node;\r\n                      return (\r\n                        <Node\r\n                          key={nodeIdx}\r\n                          col={col}\r\n                          isFinish={isFinish}\r\n                          isStart={isStart}\r\n                          isWall={isWall}\r\n                          mouseIsPressed={mouseIsPressed}\r\n                          onMouseDown={(row, col) =>\r\n                            this.handleMouseDown(row, col)\r\n                          }\r\n                          onMouseEnter={(row, col) =>\r\n                            this.handleMouseEnter(row, col)\r\n                          }\r\n                          onMouseUp={() => this.handleMouseUp(row, col)}\r\n                          row={row}\r\n                        ></Node>\r\n                      );\r\n                    })}\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n        <div className=\"controls\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-danger mb-2\"\r\n            onClick={() => this.clearGrid()}>\r\n            Clear Grid\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-warning mb-2\"\r\n            onClick={() => this.clearWalls()}>\r\n            Clear Walls\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary mb-2\"\r\n            onClick={() => this.visualize('Dijkstra')}>\r\n            Dijkstra's\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary mb-2\"\r\n            onClick={() => this.visualize('AStar')}>\r\n            A*\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary mb-2\"\r\n            onClick={() => this.visualize('BFS')}>\r\n            Breadth First Search\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary mb-2\"\r\n            onClick={() => this.visualize('DFS')}>\r\n            Depth First Search\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-dark mt-2\"\r\n            onClick={() => this.toggleView()}>\r\n            {this.state.isDesktopView ? 'Mobile View' : 'Desktop View'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n}\r\n/******************** Create Walls ********************/\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  // mouseDown starts to act strange if I don't make newGrid and work off of grid instead.\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  if (!node.isStart && !node.isFinish && node.isNode) {\r\n    const newNode = {\r\n      ...node,\r\n      isWall: !node.isWall,\r\n    };\r\n    newGrid[row][col] = newNode;\r\n  }\r\n  return newGrid;\r\n};\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called after the pathfinding methods.\r\nfunction getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}