{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TARUN\\\\Downloads\\\\pathFinderVisualizer-master\\\\pathFinderVisualizer-master\\\\src\\\\PathfindingVisualizer\\\\PathfindingVisualizer.jsx\";\nimport React, { Component } from 'react';\nimport Node from './Node/Node';\nimport { dijkstra } from '../algorithms/dijkstra';\nimport { AStar } from '../algorithms/aStar';\nimport { dfs } from '../algorithms/dfs';\nimport { bfs } from '../algorithms/bfs';\nimport './PathfindingVisualizer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.toggleIsRunning = () => {\n      this.setState({\n        isRunning: !this.state.isRunning\n      });\n    };\n    this.getInitialGrid = () => {\n      const grid = [];\n      for (let row = 0; row < this.state.ROW_COUNT; row++) {\n        const currentRow = [];\n        for (let col = 0; col < this.state.COLUMN_COUNT; col++) {\n          currentRow.push(this.createNode(row, col));\n        }\n        grid.push(currentRow);\n      }\n      return grid;\n    };\n    this.createNode = (row, col) => {\n      return {\n        row,\n        col,\n        isStart: row === this.state.START_NODE_ROW && col === this.state.START_NODE_COL,\n        isFinish: row === this.state.FINISH_NODE_ROW && col === this.state.FINISH_NODE_COL,\n        distance: Infinity,\n        distanceToFinishNode: Math.abs(this.state.FINISH_NODE_ROW - row) + Math.abs(this.state.FINISH_NODE_COL - col),\n        isVisited: false,\n        isWall: false,\n        previousNode: null\n      };\n    };\n    this.handleMouseDown = (row, col) => {\n      if (this.state.isRunning) return;\n      const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid,\n        mouseIsPressed: true\n      });\n    };\n    this.handleMouseEnter = (row, col) => {\n      if (!this.state.mouseIsPressed || this.state.isRunning) return;\n      const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid\n      });\n    };\n    this.handleMouseUp = () => {\n      this.setState({\n        mouseIsPressed: false\n      });\n    };\n    this.clearGrid = () => {\n      const newGrid = this.state.grid.map(row => row.map(node => ({\n        ...node,\n        isVisited: false,\n        distance: Infinity,\n        previousNode: null\n      })));\n      this.setState({\n        grid: newGrid\n      });\n      document.querySelectorAll('.node-visited, .node-shortest-path').forEach(el => {\n        el.className = 'node';\n      });\n    };\n    this.visualizeDijkstra = () => {\n      this.clearGrid();\n      this.toggleIsRunning();\n      const {\n        grid\n      } = this.state;\n      const startNode = grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\n      const finishNode = grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\n      const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n      animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder, this.toggleIsRunning);\n    };\n    this.state = {\n      grid: [],\n      START_NODE_ROW: 3,\n      FINISH_NODE_ROW: 16,\n      START_NODE_COL: 5,\n      FINISH_NODE_COL: 25,\n      mouseIsPressed: false,\n      ROW_COUNT: 25,\n      COLUMN_COUNT: 35,\n      isRunning: false,\n      isStartNode: false,\n      isFinishNode: false,\n      isWallNode: false,\n      // xxxxxxx\n      currRow: 0,\n      currCol: 0\n    };\n    this.handleMouseDown = this.handleMouseDown.bind(this);\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\n    this.toggleIsRunning = this.toggleIsRunning.bind(this);\n  }\n  componentDidMount() {\n    const grid = this.getInitialGrid();\n    this.setState({\n      grid\n    });\n  }\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualizer-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Pathfinding Visualizer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.visualizeDijkstra,\n          children: \"Dijkstra\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.clearGrid,\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-container\",\n        children: grid.map((row, rowIdx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-row\",\n          children: row.map((node, nodeIdx) => {\n            const {\n              row,\n              col,\n              isFinish,\n              isStart,\n              isWall\n            } = node;\n            return /*#__PURE__*/_jsxDEV(Node, {\n              col: col,\n              row: row,\n              isFinish: isFinish,\n              isStart: isStart,\n              isWall: isWall,\n              mouseIsPressed: mouseIsPressed,\n              onMouseDown: (row, col) => this.handleMouseDown(row, col),\n              onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n              onMouseUp: () => this.handleMouseUp()\n            }, nodeIdx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 19\n            }, this);\n          })\n        }, rowIdx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this);\n  }\n\n  /******************** Clear Board/Walls ********************/\n\n  clearGrid() {\n    if (!this.state.isRunning) {\n      const newGrid = this.state.grid.slice();\n      for (const row of newGrid) {\n        for (const node of row) {\n          let nodeClassName = document.getElementById(`node-${node.row}-${node.col}`).className;\n          if (nodeClassName !== 'node node-start' && nodeClassName !== 'node node-finish' && nodeClassName !== 'node node-wall') {\n            document.getElementById(`node-${node.row}-${node.col}`).className = 'node';\n            node.isVisited = false;\n            node.distance = Infinity;\n            node.distanceToFinishNode = Math.abs(this.state.FINISH_NODE_ROW - node.row) + Math.abs(this.state.FINISH_NODE_COL - node.col);\n          }\n          if (nodeClassName === 'node node-finish') {\n            node.isVisited = false;\n            node.distance = Infinity;\n            node.distanceToFinishNode = 0;\n          }\n          if (nodeClassName === 'node node-start') {\n            node.isVisited = false;\n            node.distance = Infinity;\n            node.distanceToFinishNode = Math.abs(this.state.FINISH_NODE_ROW - node.row) + Math.abs(this.state.FINISH_NODE_COL - node.col);\n            node.isStart = true;\n            node.isWall = false;\n            node.previousNode = null;\n            node.isNode = true;\n          }\n        }\n      }\n    }\n  }\n  clearWalls() {\n    if (!this.state.isRunning) {\n      const newGrid = this.state.grid.slice();\n      for (const row of newGrid) {\n        for (const node of row) {\n          let nodeClassName = document.getElementById(`node-${node.row}-${node.col}`).className;\n          if (nodeClassName === 'node node-wall') {\n            document.getElementById(`node-${node.row}-${node.col}`).className = 'node';\n            node.isWall = false;\n          }\n        }\n      }\n    }\n  }\n\n  /******************** Create Animations ********************/\n  visualize(algo) {\n    if (!this.state.isRunning) {\n      this.clearGrid();\n      this.toggleIsRunning();\n      const {\n        grid\n      } = this.state;\n      const startNode = grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\n      const finishNode = grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\n      let visitedNodesInOrder;\n      switch (algo) {\n        case 'Dijkstra':\n          visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n          break;\n        case 'AStar':\n          visitedNodesInOrder = AStar(grid, startNode, finishNode);\n          break;\n        case 'BFS':\n          visitedNodesInOrder = bfs(grid, startNode, finishNode);\n          break;\n        case 'DFS':\n          visitedNodesInOrder = dfs(grid, startNode, finishNode);\n          break;\n        default:\n          // should never get here\n          break;\n      }\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n      nodesInShortestPathOrder.push('end');\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n  }\n  animate(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        const nodeClassName = document.getElementById(`node-${node.row}-${node.col}`).className;\n        if (nodeClassName !== 'node node-start' && nodeClassName !== 'node node-finish') {\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n        }\n      }, 10 * i);\n    }\n  }\n\n  /******************** Create path from start to finish ********************/\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      if (nodesInShortestPathOrder[i] === 'end') {\n        setTimeout(() => {\n          this.toggleIsRunning();\n        }, i * 50);\n      } else {\n        setTimeout(() => {\n          const node = nodesInShortestPathOrder[i];\n          const nodeClassName = document.getElementById(`node-${node.row}-${node.col}`).className;\n          if (nodeClassName !== 'node node-start' && nodeClassName !== 'node node-finish') {\n            document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n          }\n        }, i * 40);\n      }\n    }\n  }\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n        className: \"navbar navbar-dark bg-dark justify-content-center\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"navbar-brand mb-0 h1 text-center\",\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \" Path Visualizer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-wrapper\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"grid-container\",\n            onMouseLeave: () => this.handleMouseLeave(),\n            children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n              className: \"grid\",\n              children: grid.map((row, rowIdx) => {\n                return /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: row.map((node, nodeIdx) => {\n                    const {\n                      row,\n                      col,\n                      isFinish,\n                      isStart,\n                      isWall\n                    } = node;\n                    return /*#__PURE__*/_jsxDEV(Node, {\n                      col: col,\n                      isFinish: isFinish,\n                      isStart: isStart,\n                      isWall: isWall,\n                      mouseIsPressed: mouseIsPressed,\n                      onMouseDown: (row, col) => this.handleMouseDown(row, col),\n                      onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n                      onMouseUp: () => this.handleMouseUp(row, col),\n                      row: row\n                    }, nodeIdx, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 325,\n                      columnNumber: 25\n                    }, this);\n                  })\n                }, rowIdx, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 321,\n                  columnNumber: 19\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-danger mb-2\",\n            onClick: () => this.clearGrid(),\n            children: \"Clear Grid\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-warning mb-2\",\n            onClick: () => this.clearWalls(),\n            children: \"Clear Walls\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-primary mb-2\",\n            onClick: () => this.visualize('Dijkstra'),\n            children: \"Dijkstra's\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-primary mb-2\",\n            onClick: () => this.visualize('AStar'),\n            children: \"A*\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-primary mb-2\",\n            onClick: () => this.visualize('BFS'),\n            children: \"Breadth First Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-primary mb-2\",\n            onClick: () => this.visualize('DFS'),\n            children: \"Depth First Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 5\n    }, this);\n  }\n}\n\n/******************** Create Walls ********************/\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  // mouseDown starts to act strange if I don't make newGrid and work off of grid instead.\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  if (!node.isStart && !node.isFinish && node.isNode) {\n    const newNode = {\n      ...node,\n      isWall: !node.isWall\n    };\n    newGrid[row][col] = newNode;\n  }\n  return newGrid;\n};\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called after the pathfinding methods.\nfunction getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"names":["React","Component","Node","dijkstra","AStar","dfs","bfs","jsxDEV","_jsxDEV","PathfindingVisualizer","constructor","toggleIsRunning","setState","isRunning","state","getInitialGrid","grid","row","ROW_COUNT","currentRow","col","COLUMN_COUNT","push","createNode","isStart","START_NODE_ROW","START_NODE_COL","isFinish","FINISH_NODE_ROW","FINISH_NODE_COL","distance","Infinity","distanceToFinishNode","Math","abs","isVisited","isWall","previousNode","handleMouseDown","newGrid","getNewGridWithWallToggled","mouseIsPressed","handleMouseEnter","handleMouseUp","clearGrid","map","node","document","querySelectorAll","forEach","el","className","visualizeDijkstra","startNode","finishNode","visitedNodesInOrder","nodesInShortestPathOrder","getNodesInShortestPathOrder","animateAlgorithm","isStartNode","isFinishNode","isWallNode","currRow","currCol","bind","handleMouseLeave","componentDidMount","render","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","rowIdx","nodeIdx","onMouseDown","onMouseEnter","onMouseUp","slice","nodeClassName","getElementById","isNode","clearWalls","visualize","algo","animate","i","length","setTimeout","animateShortestPath","onMouseLeave","type","newNode","currentNode","unshift"],"sources":["C:/Users/TARUN/Downloads/pathFinderVisualizer-master/pathFinderVisualizer-master/src/PathfindingVisualizer/PathfindingVisualizer.jsx"],"sourcesContent":["import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\nimport {dijkstra} from '../algorithms/dijkstra';\r\nimport {AStar} from '../algorithms/aStar';\r\nimport {dfs} from '../algorithms/dfs';\r\nimport {bfs} from '../algorithms/bfs';\r\n\r\nimport './PathfindingVisualizer.css';\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      START_NODE_ROW: 3,\r\n      FINISH_NODE_ROW: 16,\r\n      START_NODE_COL: 5,\r\n      FINISH_NODE_COL: 25,\r\n      mouseIsPressed: false,\r\n      ROW_COUNT: 25,\r\n      COLUMN_COUNT: 35,\r\n      isRunning: false,\r\n      isStartNode: false,\r\n      isFinishNode: false,\r\n      isWallNode: false, // xxxxxxx\r\n      currRow: 0,\r\n      currCol: 0,\r\n    };\r\n\r\n    this.handleMouseDown = this.handleMouseDown.bind(this);\r\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\r\n    this.toggleIsRunning = this.toggleIsRunning.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = this.getInitialGrid();\r\n    this.setState({ grid });\r\n  }\r\n\r\n  toggleIsRunning = () => {\r\n    this.setState({ isRunning: !this.state.isRunning });\r\n  };\r\n\r\n  getInitialGrid = () => {\r\n    const grid = [];\r\n    for (let row = 0; row < this.state.ROW_COUNT; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < this.state.COLUMN_COUNT; col++) {\r\n        currentRow.push(this.createNode(row, col));\r\n      }\r\n      grid.push(currentRow);\r\n    }\r\n    return grid;\r\n  };\r\n\r\n  createNode = (row, col) => {\r\n    return {\r\n      row,\r\n      col,\r\n      isStart:\r\n        row === this.state.START_NODE_ROW && col === this.state.START_NODE_COL,\r\n      isFinish:\r\n        row === this.state.FINISH_NODE_ROW &&\r\n        col === this.state.FINISH_NODE_COL,\r\n      distance: Infinity,\r\n      distanceToFinishNode:\r\n        Math.abs(this.state.FINISH_NODE_ROW - row) +\r\n        Math.abs(this.state.FINISH_NODE_COL - col),\r\n      isVisited: false,\r\n      isWall: false,\r\n      previousNode: null,\r\n    };\r\n  };\r\n\r\n  handleMouseDown = (row, col) => {\r\n    if (this.state.isRunning) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid, mouseIsPressed: true });\r\n  };\r\n\r\n  handleMouseEnter = (row, col) => {\r\n    if (!this.state.mouseIsPressed || this.state.isRunning) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid });\r\n  };\r\n\r\n  handleMouseUp = () => {\r\n    this.setState({ mouseIsPressed: false });\r\n  };\r\n\r\n  clearGrid = () => {\r\n    const newGrid = this.state.grid.map(row =>\r\n      row.map(node => ({\r\n        ...node,\r\n        isVisited: false,\r\n        distance: Infinity,\r\n        previousNode: null,\r\n      }))\r\n    );\r\n    this.setState({ grid: newGrid });\r\n    document.querySelectorAll('.node-visited, .node-shortest-path').forEach(el => {\r\n      el.className = 'node';\r\n    });\r\n  };\r\n\r\n  visualizeDijkstra = () => {\r\n    this.clearGrid();\r\n    this.toggleIsRunning();\r\n    const { grid } = this.state;\r\n    const startNode = grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\r\n    const finishNode = grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder, this.toggleIsRunning);\r\n  };\r\n\r\n  render() {\r\n    const { grid, mouseIsPressed } = this.state;\r\n\r\n    return (\r\n      <div className=\"visualizer-container\">\r\n        <h2>Pathfinding Visualizer</h2>\r\n\r\n        <div className=\"controls\">\r\n          <button onClick={this.visualizeDijkstra}>Dijkstra</button>\r\n          <button onClick={this.clearGrid}>Clear</button>\r\n        </div>\r\n\r\n        <div className=\"grid-container\">\r\n          {grid.map((row, rowIdx) => (\r\n            <div key={rowIdx} className=\"grid-row\">\r\n              {row.map((node, nodeIdx) => {\r\n                const { row, col, isFinish, isStart, isWall } = node;\r\n                return (\r\n                  <Node\r\n                    key={nodeIdx}\r\n                    col={col}\r\n                    row={row}\r\n                    isFinish={isFinish}\r\n                    isStart={isStart}\r\n                    isWall={isWall}\r\n                    mouseIsPressed={mouseIsPressed}\r\n                    onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                    onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\r\n                    onMouseUp={() => this.handleMouseUp()}\r\n                  />\r\n                );\r\n              })}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n\r\n  /******************** Clear Board/Walls ********************/\r\n\r\n  clearGrid() {\r\n    if (!this.state.isRunning) {\r\n      const newGrid = this.state.grid.slice();\r\n      for (const row of newGrid) {\r\n        for (const node of row) {\r\n          let nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`,\r\n          ).className;\r\n          if (\r\n            nodeClassName !== 'node node-start' &&\r\n            nodeClassName !== 'node node-finish' &&\r\n            nodeClassName !== 'node node-wall'\r\n          ) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node';\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode =\r\n              Math.abs(this.state.FINISH_NODE_ROW - node.row) +\r\n              Math.abs(this.state.FINISH_NODE_COL - node.col);\r\n          }\r\n          if (nodeClassName === 'node node-finish') {\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode = 0;\r\n          }\r\n          if (nodeClassName === 'node node-start') {\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode =\r\n              Math.abs(this.state.FINISH_NODE_ROW - node.row) +\r\n              Math.abs(this.state.FINISH_NODE_COL - node.col);\r\n            node.isStart = true;\r\n            node.isWall = false;\r\n            node.previousNode = null;\r\n            node.isNode = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  clearWalls() {\r\n    if (!this.state.isRunning) {\r\n      const newGrid = this.state.grid.slice();\r\n      for (const row of newGrid) {\r\n        for (const node of row) {\r\n          let nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`,\r\n          ).className;\r\n          if (nodeClassName === 'node node-wall') {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node';\r\n            node.isWall = false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /******************** Create Animations ********************/\r\n  visualize(algo) {\r\n    if (!this.state.isRunning) {\r\n      this.clearGrid();\r\n      this.toggleIsRunning();\r\n      const {grid} = this.state;\r\n      const startNode =\r\n        grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\r\n      const finishNode =\r\n        grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\r\n      let visitedNodesInOrder;\r\n      switch (algo) {\r\n        case 'Dijkstra':\r\n          visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n          break;\r\n        case 'AStar':\r\n          visitedNodesInOrder = AStar(grid, startNode, finishNode);\r\n          break;\r\n        case 'BFS':\r\n          visitedNodesInOrder = bfs(grid, startNode, finishNode);\r\n          break;\r\n        case 'DFS':\r\n          visitedNodesInOrder = dfs(grid, startNode, finishNode);\r\n          break;\r\n        default:\r\n          // should never get here\r\n          break;\r\n      }\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n      nodesInShortestPathOrder.push('end');\r\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }\r\n  }\r\n\r\n  animate(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        const nodeClassName = document.getElementById(\r\n          `node-${node.row}-${node.col}`,\r\n        ).className;\r\n        if (\r\n          nodeClassName !== 'node node-start' &&\r\n          nodeClassName !== 'node node-finish'\r\n        ) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-visited';\r\n        }\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  /******************** Create path from start to finish ********************/\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      if (nodesInShortestPathOrder[i] === 'end') {\r\n        setTimeout(() => {\r\n          this.toggleIsRunning();\r\n        }, i * 50);\r\n      } else {\r\n        setTimeout(() => {\r\n          const node = nodesInShortestPathOrder[i];\r\n          const nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`,\r\n          ).className;\r\n          if (\r\n            nodeClassName !== 'node node-start' &&\r\n            nodeClassName !== 'node node-finish'\r\n          ) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node node-shortest-path';\r\n          }\r\n        }, i * 40);\r\n      }\r\n    }\r\n  }\r\n\r\n render() {\r\n  const {grid, mouseIsPressed} = this.state;\r\n  return (\r\n    <div className=\"app-container\">\r\n      <nav className=\"navbar navbar-dark bg-dark justify-content-center\">\r\n        <span className=\"navbar-brand mb-0 h1 text-center\">\r\n          <strong> Path Visualizer</strong>\r\n        </span>\r\n      </nav>\r\n\r\n      <div className=\"main-content\">\r\n        <div className=\"grid-wrapper\">\r\n          <table\r\n            className=\"grid-container\"\r\n            onMouseLeave={() => this.handleMouseLeave()}>\r\n            <tbody className=\"grid\">\r\n              {grid.map((row, rowIdx) => {\r\n                return (\r\n                  <tr key={rowIdx}>\r\n                    {row.map((node, nodeIdx) => {\r\n                      const {row, col, isFinish, isStart, isWall} = node;\r\n                      return (\r\n                        <Node\r\n                          key={nodeIdx}\r\n                          col={col}\r\n                          isFinish={isFinish}\r\n                          isStart={isStart}\r\n                          isWall={isWall}\r\n                          mouseIsPressed={mouseIsPressed}\r\n                          onMouseDown={(row, col) =>\r\n                            this.handleMouseDown(row, col)\r\n                          }\r\n                          onMouseEnter={(row, col) =>\r\n                            this.handleMouseEnter(row, col)\r\n                          }\r\n                          onMouseUp={() => this.handleMouseUp(row, col)}\r\n                          row={row}\r\n                        ></Node>\r\n                      );\r\n                    })}\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n        <div className=\"controls\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-danger mb-2\"\r\n            onClick={() => this.clearGrid()}>\r\n            Clear Grid\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-warning mb-2\"\r\n            onClick={() => this.clearWalls()}>\r\n            Clear Walls\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary mb-2\"\r\n            onClick={() => this.visualize('Dijkstra')}>\r\n            Dijkstra's\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary mb-2\"\r\n            onClick={() => this.visualize('AStar')}>\r\n            A*\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary mb-2\"\r\n            onClick={() => this.visualize('BFS')}>\r\n            Breadth First Search\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary mb-2\"\r\n            onClick={() => this.visualize('DFS')}>\r\n            Depth First Search\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\n/******************** Create Walls ********************/\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  // mouseDown starts to act strange if I don't make newGrid and work off of grid instead.\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  if (!node.isStart && !node.isFinish && node.isNode) {\r\n    const newNode = {\r\n      ...node,\r\n      isWall: !node.isWall,\r\n    };\r\n    newGrid[row][col] = newNode;\r\n  }\r\n  return newGrid;\r\n};\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called after the pathfinding methods.\r\nfunction getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAGC,SAAS,QAAO,OAAO;AACtC,OAAOC,IAAI,MAAM,aAAa;AAC9B,SAAQC,QAAQ,QAAO,wBAAwB;AAC/C,SAAQC,KAAK,QAAO,qBAAqB;AACzC,SAAQC,GAAG,QAAO,mBAAmB;AACrC,SAAQC,GAAG,QAAO,mBAAmB;AAErC,OAAO,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,eAAe,MAAMC,qBAAqB,SAASR,SAAS,CAAC;EAC3DS,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,CAAC;IAAC,KA4BVC,eAAe,GAAG,MAAM;MACtB,IAAI,CAACC,QAAQ,CAAC;QAAEC,SAAS,EAAE,CAAC,IAAI,CAACC,KAAK,CAACD;MAAU,CAAC,CAAC;IACrD,CAAC;IAAA,KAEDE,cAAc,GAAG,MAAM;MACrB,MAAMC,IAAI,GAAG,EAAE;MACf,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,IAAI,CAACH,KAAK,CAACI,SAAS,EAAED,GAAG,EAAE,EAAE;QACnD,MAAME,UAAU,GAAG,EAAE;QACrB,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,IAAI,CAACN,KAAK,CAACO,YAAY,EAAED,GAAG,EAAE,EAAE;UACtDD,UAAU,CAACG,IAAI,CAAC,IAAI,CAACC,UAAU,CAACN,GAAG,EAAEG,GAAG,CAAC,CAAC;QAC5C;QACAJ,IAAI,CAACM,IAAI,CAACH,UAAU,CAAC;MACvB;MACA,OAAOH,IAAI;IACb,CAAC;IAAA,KAEDO,UAAU,GAAG,CAACN,GAAG,EAAEG,GAAG,KAAK;MACzB,OAAO;QACLH,GAAG;QACHG,GAAG;QACHI,OAAO,EACLP,GAAG,KAAK,IAAI,CAACH,KAAK,CAACW,cAAc,IAAIL,GAAG,KAAK,IAAI,CAACN,KAAK,CAACY,cAAc;QACxEC,QAAQ,EACNV,GAAG,KAAK,IAAI,CAACH,KAAK,CAACc,eAAe,IAClCR,GAAG,KAAK,IAAI,CAACN,KAAK,CAACe,eAAe;QACpCC,QAAQ,EAAEC,QAAQ;QAClBC,oBAAoB,EAClBC,IAAI,CAACC,GAAG,CAAC,IAAI,CAACpB,KAAK,CAACc,eAAe,GAAGX,GAAG,CAAC,GAC1CgB,IAAI,CAACC,GAAG,CAAC,IAAI,CAACpB,KAAK,CAACe,eAAe,GAAGT,GAAG,CAAC;QAC5Ce,SAAS,EAAE,KAAK;QAChBC,MAAM,EAAE,KAAK;QACbC,YAAY,EAAE;MAChB,CAAC;IACH,CAAC;IAAA,KAEDC,eAAe,GAAG,CAACrB,GAAG,EAAEG,GAAG,KAAK;MAC9B,IAAI,IAAI,CAACN,KAAK,CAACD,SAAS,EAAE;MAC1B,MAAM0B,OAAO,GAAGC,yBAAyB,CAAC,IAAI,CAAC1B,KAAK,CAACE,IAAI,EAAEC,GAAG,EAAEG,GAAG,CAAC;MACpE,IAAI,CAACR,QAAQ,CAAC;QAAEI,IAAI,EAAEuB,OAAO;QAAEE,cAAc,EAAE;MAAK,CAAC,CAAC;IACxD,CAAC;IAAA,KAEDC,gBAAgB,GAAG,CAACzB,GAAG,EAAEG,GAAG,KAAK;MAC/B,IAAI,CAAC,IAAI,CAACN,KAAK,CAAC2B,cAAc,IAAI,IAAI,CAAC3B,KAAK,CAACD,SAAS,EAAE;MACxD,MAAM0B,OAAO,GAAGC,yBAAyB,CAAC,IAAI,CAAC1B,KAAK,CAACE,IAAI,EAAEC,GAAG,EAAEG,GAAG,CAAC;MACpE,IAAI,CAACR,QAAQ,CAAC;QAAEI,IAAI,EAAEuB;MAAQ,CAAC,CAAC;IAClC,CAAC;IAAA,KAEDI,aAAa,GAAG,MAAM;MACpB,IAAI,CAAC/B,QAAQ,CAAC;QAAE6B,cAAc,EAAE;MAAM,CAAC,CAAC;IAC1C,CAAC;IAAA,KAEDG,SAAS,GAAG,MAAM;MAChB,MAAML,OAAO,GAAG,IAAI,CAACzB,KAAK,CAACE,IAAI,CAAC6B,GAAG,CAAC5B,GAAG,IACrCA,GAAG,CAAC4B,GAAG,CAACC,IAAI,KAAK;QACf,GAAGA,IAAI;QACPX,SAAS,EAAE,KAAK;QAChBL,QAAQ,EAAEC,QAAQ;QAClBM,YAAY,EAAE;MAChB,CAAC,CAAC,CACJ,CAAC;MACD,IAAI,CAACzB,QAAQ,CAAC;QAAEI,IAAI,EAAEuB;MAAQ,CAAC,CAAC;MAChCQ,QAAQ,CAACC,gBAAgB,CAAC,oCAAoC,CAAC,CAACC,OAAO,CAACC,EAAE,IAAI;QAC5EA,EAAE,CAACC,SAAS,GAAG,MAAM;MACvB,CAAC,CAAC;IACJ,CAAC;IAAA,KAEDC,iBAAiB,GAAG,MAAM;MACxB,IAAI,CAACR,SAAS,CAAC,CAAC;MAChB,IAAI,CAACjC,eAAe,CAAC,CAAC;MACtB,MAAM;QAAEK;MAAK,CAAC,GAAG,IAAI,CAACF,KAAK;MAC3B,MAAMuC,SAAS,GAAGrC,IAAI,CAAC,IAAI,CAACF,KAAK,CAACW,cAAc,CAAC,CAAC,IAAI,CAACX,KAAK,CAACY,cAAc,CAAC;MAC5E,MAAM4B,UAAU,GAAGtC,IAAI,CAAC,IAAI,CAACF,KAAK,CAACc,eAAe,CAAC,CAAC,IAAI,CAACd,KAAK,CAACe,eAAe,CAAC;MAC/E,MAAM0B,mBAAmB,GAAGpD,QAAQ,CAACa,IAAI,EAAEqC,SAAS,EAAEC,UAAU,CAAC;MACjE,MAAME,wBAAwB,GAAGC,2BAA2B,CAACH,UAAU,CAAC;MACxEI,gBAAgB,CAACH,mBAAmB,EAAEC,wBAAwB,EAAE,IAAI,CAAC7C,eAAe,CAAC;IACvF,CAAC;IAtGC,IAAI,CAACG,KAAK,GAAG;MACXE,IAAI,EAAE,EAAE;MACRS,cAAc,EAAE,CAAC;MACjBG,eAAe,EAAE,EAAE;MACnBF,cAAc,EAAE,CAAC;MACjBG,eAAe,EAAE,EAAE;MACnBY,cAAc,EAAE,KAAK;MACrBvB,SAAS,EAAE,EAAE;MACbG,YAAY,EAAE,EAAE;MAChBR,SAAS,EAAE,KAAK;MAChB8C,WAAW,EAAE,KAAK;MAClBC,YAAY,EAAE,KAAK;MACnBC,UAAU,EAAE,KAAK;MAAE;MACnBC,OAAO,EAAE,CAAC;MACVC,OAAO,EAAE;IACX,CAAC;IAED,IAAI,CAACzB,eAAe,GAAG,IAAI,CAACA,eAAe,CAAC0B,IAAI,CAAC,IAAI,CAAC;IACtD,IAAI,CAACC,gBAAgB,GAAG,IAAI,CAACA,gBAAgB,CAACD,IAAI,CAAC,IAAI,CAAC;IACxD,IAAI,CAACrD,eAAe,GAAG,IAAI,CAACA,eAAe,CAACqD,IAAI,CAAC,IAAI,CAAC;EACxD;EAEAE,iBAAiBA,CAAA,EAAG;IAClB,MAAMlD,IAAI,GAAG,IAAI,CAACD,cAAc,CAAC,CAAC;IAClC,IAAI,CAACH,QAAQ,CAAC;MAAEI;IAAK,CAAC,CAAC;EACzB;EA+EAmD,MAAMA,CAAA,EAAG;IACP,MAAM;MAAEnD,IAAI;MAAEyB;IAAe,CAAC,GAAG,IAAI,CAAC3B,KAAK;IAE3C,oBACEN,OAAA;MAAK2C,SAAS,EAAC,sBAAsB;MAAAiB,QAAA,gBACnC5D,OAAA;QAAA4D,QAAA,EAAI;MAAsB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAE/BhE,OAAA;QAAK2C,SAAS,EAAC,UAAU;QAAAiB,QAAA,gBACvB5D,OAAA;UAAQiE,OAAO,EAAE,IAAI,CAACrB,iBAAkB;UAAAgB,QAAA,EAAC;QAAQ;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC1DhE,OAAA;UAAQiE,OAAO,EAAE,IAAI,CAAC7B,SAAU;UAAAwB,QAAA,EAAC;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5C,CAAC,eAENhE,OAAA;QAAK2C,SAAS,EAAC,gBAAgB;QAAAiB,QAAA,EAC5BpD,IAAI,CAAC6B,GAAG,CAAC,CAAC5B,GAAG,EAAEyD,MAAM,kBACpBlE,OAAA;UAAkB2C,SAAS,EAAC,UAAU;UAAAiB,QAAA,EACnCnD,GAAG,CAAC4B,GAAG,CAAC,CAACC,IAAI,EAAE6B,OAAO,KAAK;YAC1B,MAAM;cAAE1D,GAAG;cAAEG,GAAG;cAAEO,QAAQ;cAAEH,OAAO;cAAEY;YAAO,CAAC,GAAGU,IAAI;YACpD,oBACEtC,OAAA,CAACN,IAAI;cAEHkB,GAAG,EAAEA,GAAI;cACTH,GAAG,EAAEA,GAAI;cACTU,QAAQ,EAAEA,QAAS;cACnBH,OAAO,EAAEA,OAAQ;cACjBY,MAAM,EAAEA,MAAO;cACfK,cAAc,EAAEA,cAAe;cAC/BmC,WAAW,EAAEA,CAAC3D,GAAG,EAAEG,GAAG,KAAK,IAAI,CAACkB,eAAe,CAACrB,GAAG,EAAEG,GAAG,CAAE;cAC1DyD,YAAY,EAAEA,CAAC5D,GAAG,EAAEG,GAAG,KAAK,IAAI,CAACsB,gBAAgB,CAACzB,GAAG,EAAEG,GAAG,CAAE;cAC5D0D,SAAS,EAAEA,CAAA,KAAM,IAAI,CAACnC,aAAa,CAAC;YAAE,GATjCgC,OAAO;cAAAN,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAUb,CAAC;UAEN,CAAC;QAAC,GAjBME,MAAM;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAkBX,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEV;;EAIA;;EAEA5B,SAASA,CAAA,EAAG;IACV,IAAI,CAAC,IAAI,CAAC9B,KAAK,CAACD,SAAS,EAAE;MACzB,MAAM0B,OAAO,GAAG,IAAI,CAACzB,KAAK,CAACE,IAAI,CAAC+D,KAAK,CAAC,CAAC;MACvC,KAAK,MAAM9D,GAAG,IAAIsB,OAAO,EAAE;QACzB,KAAK,MAAMO,IAAI,IAAI7B,GAAG,EAAE;UACtB,IAAI+D,aAAa,GAAGjC,QAAQ,CAACkC,cAAc,CACzC,QAAQnC,IAAI,CAAC7B,GAAG,IAAI6B,IAAI,CAAC1B,GAAG,EAC9B,CAAC,CAAC+B,SAAS;UACX,IACE6B,aAAa,KAAK,iBAAiB,IACnCA,aAAa,KAAK,kBAAkB,IACpCA,aAAa,KAAK,gBAAgB,EAClC;YACAjC,QAAQ,CAACkC,cAAc,CAAC,QAAQnC,IAAI,CAAC7B,GAAG,IAAI6B,IAAI,CAAC1B,GAAG,EAAE,CAAC,CAAC+B,SAAS,GAC/D,MAAM;YACRL,IAAI,CAACX,SAAS,GAAG,KAAK;YACtBW,IAAI,CAAChB,QAAQ,GAAGC,QAAQ;YACxBe,IAAI,CAACd,oBAAoB,GACvBC,IAAI,CAACC,GAAG,CAAC,IAAI,CAACpB,KAAK,CAACc,eAAe,GAAGkB,IAAI,CAAC7B,GAAG,CAAC,GAC/CgB,IAAI,CAACC,GAAG,CAAC,IAAI,CAACpB,KAAK,CAACe,eAAe,GAAGiB,IAAI,CAAC1B,GAAG,CAAC;UACnD;UACA,IAAI4D,aAAa,KAAK,kBAAkB,EAAE;YACxClC,IAAI,CAACX,SAAS,GAAG,KAAK;YACtBW,IAAI,CAAChB,QAAQ,GAAGC,QAAQ;YACxBe,IAAI,CAACd,oBAAoB,GAAG,CAAC;UAC/B;UACA,IAAIgD,aAAa,KAAK,iBAAiB,EAAE;YACvClC,IAAI,CAACX,SAAS,GAAG,KAAK;YACtBW,IAAI,CAAChB,QAAQ,GAAGC,QAAQ;YACxBe,IAAI,CAACd,oBAAoB,GACvBC,IAAI,CAACC,GAAG,CAAC,IAAI,CAACpB,KAAK,CAACc,eAAe,GAAGkB,IAAI,CAAC7B,GAAG,CAAC,GAC/CgB,IAAI,CAACC,GAAG,CAAC,IAAI,CAACpB,KAAK,CAACe,eAAe,GAAGiB,IAAI,CAAC1B,GAAG,CAAC;YACjD0B,IAAI,CAACtB,OAAO,GAAG,IAAI;YACnBsB,IAAI,CAACV,MAAM,GAAG,KAAK;YACnBU,IAAI,CAACT,YAAY,GAAG,IAAI;YACxBS,IAAI,CAACoC,MAAM,GAAG,IAAI;UACpB;QACF;MACF;IACF;EACF;EAEAC,UAAUA,CAAA,EAAG;IACX,IAAI,CAAC,IAAI,CAACrE,KAAK,CAACD,SAAS,EAAE;MACzB,MAAM0B,OAAO,GAAG,IAAI,CAACzB,KAAK,CAACE,IAAI,CAAC+D,KAAK,CAAC,CAAC;MACvC,KAAK,MAAM9D,GAAG,IAAIsB,OAAO,EAAE;QACzB,KAAK,MAAMO,IAAI,IAAI7B,GAAG,EAAE;UACtB,IAAI+D,aAAa,GAAGjC,QAAQ,CAACkC,cAAc,CACzC,QAAQnC,IAAI,CAAC7B,GAAG,IAAI6B,IAAI,CAAC1B,GAAG,EAC9B,CAAC,CAAC+B,SAAS;UACX,IAAI6B,aAAa,KAAK,gBAAgB,EAAE;YACtCjC,QAAQ,CAACkC,cAAc,CAAC,QAAQnC,IAAI,CAAC7B,GAAG,IAAI6B,IAAI,CAAC1B,GAAG,EAAE,CAAC,CAAC+B,SAAS,GAC/D,MAAM;YACRL,IAAI,CAACV,MAAM,GAAG,KAAK;UACrB;QACF;MACF;IACF;EACF;;EAEA;EACAgD,SAASA,CAACC,IAAI,EAAE;IACd,IAAI,CAAC,IAAI,CAACvE,KAAK,CAACD,SAAS,EAAE;MACzB,IAAI,CAAC+B,SAAS,CAAC,CAAC;MAChB,IAAI,CAACjC,eAAe,CAAC,CAAC;MACtB,MAAM;QAACK;MAAI,CAAC,GAAG,IAAI,CAACF,KAAK;MACzB,MAAMuC,SAAS,GACbrC,IAAI,CAAC,IAAI,CAACF,KAAK,CAACW,cAAc,CAAC,CAAC,IAAI,CAACX,KAAK,CAACY,cAAc,CAAC;MAC5D,MAAM4B,UAAU,GACdtC,IAAI,CAAC,IAAI,CAACF,KAAK,CAACc,eAAe,CAAC,CAAC,IAAI,CAACd,KAAK,CAACe,eAAe,CAAC;MAC9D,IAAI0B,mBAAmB;MACvB,QAAQ8B,IAAI;QACV,KAAK,UAAU;UACb9B,mBAAmB,GAAGpD,QAAQ,CAACa,IAAI,EAAEqC,SAAS,EAAEC,UAAU,CAAC;UAC3D;QACF,KAAK,OAAO;UACVC,mBAAmB,GAAGnD,KAAK,CAACY,IAAI,EAAEqC,SAAS,EAAEC,UAAU,CAAC;UACxD;QACF,KAAK,KAAK;UACRC,mBAAmB,GAAGjD,GAAG,CAACU,IAAI,EAAEqC,SAAS,EAAEC,UAAU,CAAC;UACtD;QACF,KAAK,KAAK;UACRC,mBAAmB,GAAGlD,GAAG,CAACW,IAAI,EAAEqC,SAAS,EAAEC,UAAU,CAAC;UACtD;QACF;UACE;UACA;MACJ;MACA,MAAME,wBAAwB,GAAGC,2BAA2B,CAACH,UAAU,CAAC;MACxEE,wBAAwB,CAAClC,IAAI,CAAC,KAAK,CAAC;MACpC,IAAI,CAACgE,OAAO,CAAC/B,mBAAmB,EAAEC,wBAAwB,CAAC;IAC7D;EACF;EAEA8B,OAAOA,CAAC/B,mBAAmB,EAAEC,wBAAwB,EAAE;IACrD,KAAK,IAAI+B,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIhC,mBAAmB,CAACiC,MAAM,EAAED,CAAC,EAAE,EAAE;MACpD,IAAIA,CAAC,KAAKhC,mBAAmB,CAACiC,MAAM,EAAE;QACpCC,UAAU,CAAC,MAAM;UACf,IAAI,CAACC,mBAAmB,CAAClC,wBAAwB,CAAC;QACpD,CAAC,EAAE,EAAE,GAAG+B,CAAC,CAAC;QACV;MACF;MACAE,UAAU,CAAC,MAAM;QACf,MAAM3C,IAAI,GAAGS,mBAAmB,CAACgC,CAAC,CAAC;QACnC,MAAMP,aAAa,GAAGjC,QAAQ,CAACkC,cAAc,CAC3C,QAAQnC,IAAI,CAAC7B,GAAG,IAAI6B,IAAI,CAAC1B,GAAG,EAC9B,CAAC,CAAC+B,SAAS;QACX,IACE6B,aAAa,KAAK,iBAAiB,IACnCA,aAAa,KAAK,kBAAkB,EACpC;UACAjC,QAAQ,CAACkC,cAAc,CAAC,QAAQnC,IAAI,CAAC7B,GAAG,IAAI6B,IAAI,CAAC1B,GAAG,EAAE,CAAC,CAAC+B,SAAS,GAC/D,mBAAmB;QACvB;MACF,CAAC,EAAE,EAAE,GAAGoC,CAAC,CAAC;IACZ;EACF;;EAEA;EACAG,mBAAmBA,CAAClC,wBAAwB,EAAE;IAC5C,KAAK,IAAI+B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG/B,wBAAwB,CAACgC,MAAM,EAAED,CAAC,EAAE,EAAE;MACxD,IAAI/B,wBAAwB,CAAC+B,CAAC,CAAC,KAAK,KAAK,EAAE;QACzCE,UAAU,CAAC,MAAM;UACf,IAAI,CAAC9E,eAAe,CAAC,CAAC;QACxB,CAAC,EAAE4E,CAAC,GAAG,EAAE,CAAC;MACZ,CAAC,MAAM;QACLE,UAAU,CAAC,MAAM;UACf,MAAM3C,IAAI,GAAGU,wBAAwB,CAAC+B,CAAC,CAAC;UACxC,MAAMP,aAAa,GAAGjC,QAAQ,CAACkC,cAAc,CAC3C,QAAQnC,IAAI,CAAC7B,GAAG,IAAI6B,IAAI,CAAC1B,GAAG,EAC9B,CAAC,CAAC+B,SAAS;UACX,IACE6B,aAAa,KAAK,iBAAiB,IACnCA,aAAa,KAAK,kBAAkB,EACpC;YACAjC,QAAQ,CAACkC,cAAc,CAAC,QAAQnC,IAAI,CAAC7B,GAAG,IAAI6B,IAAI,CAAC1B,GAAG,EAAE,CAAC,CAAC+B,SAAS,GAC/D,yBAAyB;UAC7B;QACF,CAAC,EAAEoC,CAAC,GAAG,EAAE,CAAC;MACZ;IACF;EACF;EAEDpB,MAAMA,CAAA,EAAG;IACR,MAAM;MAACnD,IAAI;MAAEyB;IAAc,CAAC,GAAG,IAAI,CAAC3B,KAAK;IACzC,oBACEN,OAAA;MAAK2C,SAAS,EAAC,eAAe;MAAAiB,QAAA,gBAC5B5D,OAAA;QAAK2C,SAAS,EAAC,mDAAmD;QAAAiB,QAAA,eAChE5D,OAAA;UAAM2C,SAAS,EAAC,kCAAkC;UAAAiB,QAAA,eAChD5D,OAAA;YAAA4D,QAAA,EAAQ;UAAgB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7B;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ,CAAC,eAENhE,OAAA;QAAK2C,SAAS,EAAC,cAAc;QAAAiB,QAAA,gBAC3B5D,OAAA;UAAK2C,SAAS,EAAC,cAAc;UAAAiB,QAAA,eAC3B5D,OAAA;YACE2C,SAAS,EAAC,gBAAgB;YAC1BwC,YAAY,EAAEA,CAAA,KAAM,IAAI,CAAC1B,gBAAgB,CAAC,CAAE;YAAAG,QAAA,eAC5C5D,OAAA;cAAO2C,SAAS,EAAC,MAAM;cAAAiB,QAAA,EACpBpD,IAAI,CAAC6B,GAAG,CAAC,CAAC5B,GAAG,EAAEyD,MAAM,KAAK;gBACzB,oBACElE,OAAA;kBAAA4D,QAAA,EACGnD,GAAG,CAAC4B,GAAG,CAAC,CAACC,IAAI,EAAE6B,OAAO,KAAK;oBAC1B,MAAM;sBAAC1D,GAAG;sBAAEG,GAAG;sBAAEO,QAAQ;sBAAEH,OAAO;sBAAEY;oBAAM,CAAC,GAAGU,IAAI;oBAClD,oBACEtC,OAAA,CAACN,IAAI;sBAEHkB,GAAG,EAAEA,GAAI;sBACTO,QAAQ,EAAEA,QAAS;sBACnBH,OAAO,EAAEA,OAAQ;sBACjBY,MAAM,EAAEA,MAAO;sBACfK,cAAc,EAAEA,cAAe;sBAC/BmC,WAAW,EAAEA,CAAC3D,GAAG,EAAEG,GAAG,KACpB,IAAI,CAACkB,eAAe,CAACrB,GAAG,EAAEG,GAAG,CAC9B;sBACDyD,YAAY,EAAEA,CAAC5D,GAAG,EAAEG,GAAG,KACrB,IAAI,CAACsB,gBAAgB,CAACzB,GAAG,EAAEG,GAAG,CAC/B;sBACD0D,SAAS,EAAEA,CAAA,KAAM,IAAI,CAACnC,aAAa,CAAC1B,GAAG,EAAEG,GAAG,CAAE;sBAC9CH,GAAG,EAAEA;oBAAI,GAbJ0D,OAAO;sBAAAN,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAcP,CAAC;kBAEZ,CAAC;gBAAC,GArBKE,MAAM;kBAAAL,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAsBX,CAAC;cAET,CAAC;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACG;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC,eAENhE,OAAA;UAAK2C,SAAS,EAAC,UAAU;UAAAiB,QAAA,gBACvB5D,OAAA;YACEoF,IAAI,EAAC,QAAQ;YACbzC,SAAS,EAAC,qBAAqB;YAC/BsB,OAAO,EAAEA,CAAA,KAAM,IAAI,CAAC7B,SAAS,CAAC,CAAE;YAAAwB,QAAA,EAAC;UAEnC;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACThE,OAAA;YACEoF,IAAI,EAAC,QAAQ;YACbzC,SAAS,EAAC,sBAAsB;YAChCsB,OAAO,EAAEA,CAAA,KAAM,IAAI,CAACU,UAAU,CAAC,CAAE;YAAAf,QAAA,EAAC;UAEpC;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACThE,OAAA;YACEoF,IAAI,EAAC,QAAQ;YACbzC,SAAS,EAAC,sBAAsB;YAChCsB,OAAO,EAAEA,CAAA,KAAM,IAAI,CAACW,SAAS,CAAC,UAAU,CAAE;YAAAhB,QAAA,EAAC;UAE7C;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACThE,OAAA;YACEoF,IAAI,EAAC,QAAQ;YACbzC,SAAS,EAAC,sBAAsB;YAChCsB,OAAO,EAAEA,CAAA,KAAM,IAAI,CAACW,SAAS,CAAC,OAAO,CAAE;YAAAhB,QAAA,EAAC;UAE1C;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACThE,OAAA;YACEoF,IAAI,EAAC,QAAQ;YACbzC,SAAS,EAAC,sBAAsB;YAChCsB,OAAO,EAAEA,CAAA,KAAM,IAAI,CAACW,SAAS,CAAC,KAAK,CAAE;YAAAhB,QAAA,EAAC;UAExC;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACThE,OAAA;YACEoF,IAAI,EAAC,QAAQ;YACbzC,SAAS,EAAC,sBAAsB;YAChCsB,OAAO,EAAEA,CAAA,KAAM,IAAI,CAACW,SAAS,CAAC,KAAK,CAAE;YAAAhB,QAAA,EAAC;UAExC;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEV;AACA;;AAEA;AACA,MAAMhC,yBAAyB,GAAGA,CAACxB,IAAI,EAAEC,GAAG,EAAEG,GAAG,KAAK;EACpD;EACA,MAAMmB,OAAO,GAAGvB,IAAI,CAAC+D,KAAK,CAAC,CAAC;EAC5B,MAAMjC,IAAI,GAAGP,OAAO,CAACtB,GAAG,CAAC,CAACG,GAAG,CAAC;EAC9B,IAAI,CAAC0B,IAAI,CAACtB,OAAO,IAAI,CAACsB,IAAI,CAACnB,QAAQ,IAAImB,IAAI,CAACoC,MAAM,EAAE;IAClD,MAAMW,OAAO,GAAG;MACd,GAAG/C,IAAI;MACPV,MAAM,EAAE,CAACU,IAAI,CAACV;IAChB,CAAC;IACDG,OAAO,CAACtB,GAAG,CAAC,CAACG,GAAG,CAAC,GAAGyE,OAAO;EAC7B;EACA,OAAOtD,OAAO;AAChB,CAAC;;AAED;AACA;AACA,SAASkB,2BAA2BA,CAACH,UAAU,EAAE;EAC/C,MAAME,wBAAwB,GAAG,EAAE;EACnC,IAAIsC,WAAW,GAAGxC,UAAU;EAC5B,OAAOwC,WAAW,KAAK,IAAI,EAAE;IAC3BtC,wBAAwB,CAACuC,OAAO,CAACD,WAAW,CAAC;IAC7CA,WAAW,GAAGA,WAAW,CAACzD,YAAY;EACxC;EACA,OAAOmB,wBAAwB;AACjC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}