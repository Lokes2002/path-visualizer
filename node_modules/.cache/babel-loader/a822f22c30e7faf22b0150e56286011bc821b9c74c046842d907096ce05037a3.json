{"ast":null,"code":"// Returns all nodes in the order in which they were visited.\n// Make nodes point back to their previous node so that we can compute the shortest path\n// by backtracking from the finish node.\nexport function AStar(grid,startNode,finishNode){const visitedNodesInOrder=[];startNode.distance=0;const unvisitedNodes=getAllNodes(grid);// Q: different from using grid or slice of grid???\nwhile(unvisitedNodes.length){sortByDistance(unvisitedNodes);const closestNode=unvisitedNodes.shift();// If we encounter a wall, we skip it.\nif(!closestNode.isWall){// If the closest node is at a distance of infinity,\n// we must be trapped and should stop.\nif(closestNode.distance===Infinity)return visitedNodesInOrder;closestNode.isVisited=true;visitedNodesInOrder.push(closestNode);if(closestNode===finishNode)return visitedNodesInOrder;updateUnvisitedNeighbors(closestNode,grid);}}}function getAllNodes(grid){const nodes=[];for(const row of grid){for(const node of row){nodes.push(node);}}return nodes;}function sortByDistance(unvisitedNodes){unvisitedNodes.sort((nodeA,nodeB)=>nodeA.distance-nodeB.distance);}function updateUnvisitedNeighbors(node,grid){const unvisitedNeighbors=getUnvisitedNeighbors(node,grid);for(const neighbor of unvisitedNeighbors){neighbor.distance=node.distance+1+neighbor.distanceToFinishNode;neighbor.previousNode=node;}}function getUnvisitedNeighbors(node,grid){const neighbors=[];const{col,row}=node;if(row>0)neighbors.push(grid[row-1][col]);if(row<grid.length-1)neighbors.push(grid[row+1][col]);if(col>0)neighbors.push(grid[row][col-1]);if(col<grid[0].length-1)neighbors.push(grid[row][col+1]);return neighbors.filter(neighbor=>!neighbor.isVisited);}","map":{"version":3,"names":["AStar","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","getAllNodes","length","sortByDistance","closestNode","shift","isWall","Infinity","isVisited","push","updateUnvisitedNeighbors","nodes","row","node","sort","nodeA","nodeB","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","distanceToFinishNode","previousNode","neighbors","col","filter"],"sources":["C:/Users/TARUN/Downloads/pathFinderVisualizer-master/pathFinderVisualizer-master/src/algorithms/aStar.js"],"sourcesContent":["// Returns all nodes in the order in which they were visited.\r\n// Make nodes point back to their previous node so that we can compute the shortest path\r\n// by backtracking from the finish node.\r\n\r\nexport function AStar(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid); // Q: different from using grid or slice of grid???\r\n\r\n  while (unvisitedNodes.length) {\r\n    sortByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (!closestNode.isWall) {\r\n      // If the closest node is at a distance of infinity,\r\n      // we must be trapped and should stop.\r\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n      closestNode.isVisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n      if (closestNode === finishNode) return visitedNodesInOrder;\r\n      updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n  }\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nfunction sortByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1 + neighbor.distanceToFinishNode;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AAEA,MAAO,SAAS,CAAAA,KAAKA,CAACC,IAAI,CAAEC,SAAS,CAAEC,UAAU,CAAE,CACjD,KAAM,CAAAC,mBAAmB,CAAG,EAAE,CAC9BF,SAAS,CAACG,QAAQ,CAAG,CAAC,CACtB,KAAM,CAAAC,cAAc,CAAGC,WAAW,CAACN,IAAI,CAAC,CAAE;AAE1C,MAAOK,cAAc,CAACE,MAAM,CAAE,CAC5BC,cAAc,CAACH,cAAc,CAAC,CAC9B,KAAM,CAAAI,WAAW,CAAGJ,cAAc,CAACK,KAAK,CAAC,CAAC,CAC1C;AACA,GAAI,CAACD,WAAW,CAACE,MAAM,CAAE,CACvB;AACA;AACA,GAAIF,WAAW,CAACL,QAAQ,GAAKQ,QAAQ,CAAE,MAAO,CAAAT,mBAAmB,CACjEM,WAAW,CAACI,SAAS,CAAG,IAAI,CAC5BV,mBAAmB,CAACW,IAAI,CAACL,WAAW,CAAC,CACrC,GAAIA,WAAW,GAAKP,UAAU,CAAE,MAAO,CAAAC,mBAAmB,CAC1DY,wBAAwB,CAACN,WAAW,CAAET,IAAI,CAAC,CAC7C,CACF,CACF,CAEA,QAAS,CAAAM,WAAWA,CAACN,IAAI,CAAE,CACzB,KAAM,CAAAgB,KAAK,CAAG,EAAE,CAChB,IAAK,KAAM,CAAAC,GAAG,GAAI,CAAAjB,IAAI,CAAE,CACtB,IAAK,KAAM,CAAAkB,IAAI,GAAI,CAAAD,GAAG,CAAE,CACtBD,KAAK,CAACF,IAAI,CAACI,IAAI,CAAC,CAClB,CACF,CACA,MAAO,CAAAF,KAAK,CACd,CAEA,QAAS,CAAAR,cAAcA,CAACH,cAAc,CAAE,CACtCA,cAAc,CAACc,IAAI,CAAC,CAACC,KAAK,CAAEC,KAAK,GAAKD,KAAK,CAAChB,QAAQ,CAAGiB,KAAK,CAACjB,QAAQ,CAAC,CACxE,CAEA,QAAS,CAAAW,wBAAwBA,CAACG,IAAI,CAAElB,IAAI,CAAE,CAC5C,KAAM,CAAAsB,kBAAkB,CAAGC,qBAAqB,CAACL,IAAI,CAAElB,IAAI,CAAC,CAC5D,IAAK,KAAM,CAAAwB,QAAQ,GAAI,CAAAF,kBAAkB,CAAE,CACzCE,QAAQ,CAACpB,QAAQ,CAAGc,IAAI,CAACd,QAAQ,CAAG,CAAC,CAAGoB,QAAQ,CAACC,oBAAoB,CACrED,QAAQ,CAACE,YAAY,CAAGR,IAAI,CAC9B,CACF,CAEA,QAAS,CAAAK,qBAAqBA,CAACL,IAAI,CAAElB,IAAI,CAAE,CACzC,KAAM,CAAA2B,SAAS,CAAG,EAAE,CACpB,KAAM,CAACC,GAAG,CAAEX,GAAG,CAAC,CAAGC,IAAI,CACvB,GAAID,GAAG,CAAG,CAAC,CAAEU,SAAS,CAACb,IAAI,CAACd,IAAI,CAACiB,GAAG,CAAG,CAAC,CAAC,CAACW,GAAG,CAAC,CAAC,CAC/C,GAAIX,GAAG,CAAGjB,IAAI,CAACO,MAAM,CAAG,CAAC,CAAEoB,SAAS,CAACb,IAAI,CAACd,IAAI,CAACiB,GAAG,CAAG,CAAC,CAAC,CAACW,GAAG,CAAC,CAAC,CAC7D,GAAIA,GAAG,CAAG,CAAC,CAAED,SAAS,CAACb,IAAI,CAACd,IAAI,CAACiB,GAAG,CAAC,CAACW,GAAG,CAAG,CAAC,CAAC,CAAC,CAC/C,GAAIA,GAAG,CAAG5B,IAAI,CAAC,CAAC,CAAC,CAACO,MAAM,CAAG,CAAC,CAAEoB,SAAS,CAACb,IAAI,CAACd,IAAI,CAACiB,GAAG,CAAC,CAACW,GAAG,CAAG,CAAC,CAAC,CAAC,CAChE,MAAO,CAAAD,SAAS,CAACE,MAAM,CAACL,QAAQ,EAAI,CAACA,QAAQ,CAACX,SAAS,CAAC,CAC1D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}